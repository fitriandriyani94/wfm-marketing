{"version":3,"sources":["components/services/AuthenticationService.js","components/services/AuthenticatedRoute.jsx","components/services/LoginService.js","components/views/FooterComponentList.jsx","components/views/HeaderComponent.jsx","components/views/LoginComponent.jsx","components/views/FooterComponent.jsx","components/services/OptimizerService.js","components/views/WelcomeComponent.jsx","components/views/ErrorComponent.jsx","components/views/LogoutComponent.jsx","components/services/EmployeeDataService.js","components/views/ListEmployeeComponent.jsx","components/views/EmployeeComponent.jsx","components/services/JobDataService.js","components/views/ListJobComponent.jsx","components/views/JobComponent.jsx","components/services/ShiftDataService.js","components/views/ListShiftComponent.jsx","components/views/ShiftComponent.jsx","components/services/SkillDataService.js","components/views/ListSkillComponent.jsx","components/views/SkillComponent.jsx","components/services/RoleDataService.js","components/views/ListRoleComponent.jsx","components/views/RoleComponent.jsx","components/services/EmployeeSkillService.js","components/views/ListEmployeeSkillComponent.jsx","components/views/EmployeeSkillComponent.jsx","components/views/OptimizerComponent.jsx","components/views/WorkforceApp.jsx","App.js","serviceWorker.js","index.js"],"names":["username","password","role","sessionStorage","setItem","removeItem","getItem","user","AuthenticatedRoute","AuthenticationService","isUserLoggedIn","this","props","to","Component","SERVICE_API","loginData","axios","post","FooterComponentList","className","HeaderComponent","isAdminLoggedIn","getUserLoggedIn","getLoggedInUserName","href","onClick","logout","LoginComponent","state","email","hasLoginFailed","showSuccessMessage","handleChange","bind","loginClicked","event","setState","target","name","value","LoginService","getLogin","then","resp","console","log","data","registerSuccessfulLogin","history","push","catch","htmlFor","type","id","onChange","FooterComponent","get","WelcomeComponent","pieoptions","chart","xaxis","categories","pieseries","series","chartOptions","labels","refreshJobCategoryCount","refreshJobEmployeeCount","OptimizerService","getJobCategoryCount","response","getJobEmployeeCount","match","params","options","width","ErrorComponent","LogoutComponent","delete","todo","put","ListEmployeeComponent","employees","message","refreshEmployees","deleteEmployeeClicked","updateEmployeeClicked","addEmployeeClicked","EmployeeDataService","retrieveAllEmployees","deleteEmployee","bordered","striped","hover","size","map","employee","key","employeeId","address","roleCode","roleName","employeeStatus","EmployeeComponent","birthPlace","birthDate","gender","phoneNumber","joinDate","resignationDate","onSubmit","validate","retrieveEmployee","moment","format","values","errors","length","nip","createEmployee","updateEmployee","initialValues","validateOnChange","validateOnBlur","enableReinitialize","component","ListJobComponent","jobs","refreshJobs","deleteJobClicked","updateJobClicked","addJobClicked","JobDataService","retrieveAllJobs","deleteJob","job","jobCode","jobDescription","shiftCode","activityDate","startTime","endTime","JobComponent","instance","classCount","retrieveJob","createJob","updateJob","ListShiftComponent","shifts","refreshShifts","deleteShiftClicked","updateShiftClicked","addShiftClicked","ShiftDataService","retrieveAllShifts","deleteShift","shift","shiftName","ShiftComponent","retrieveShift","createShift","updateShift","ListSkillComponent","skills","refreshSkills","deleteSkillClicked","updateSkillClicked","addSkillClicked","SkillDataService","retrieveAllSkills","deleteSkill","skill","skillCode","skillName","SkillComponent","retrieveSkill","createSkill","updateSkill","ListRoleComponent","roles","refreshRoles","deleteRoleClicked","updateRoleClicked","addRoleClicked","RoleDataService","retrieveAllRoles","deleteRole","RoleComponent","retrieveRole","createRole","updateRole","employeeSkills","refreshEmployeeSkills","deleteEmployeeSkillClicked","updateEmployeeSkillClicked","addEmployeeSkillClicked","EmployeeSkillService","retrieveAllEmployeeSkills","deleteEmployeeSkill","employeeSkill","EmployeeSkillComponent","retrieveEmployeeSkill","skiilCode","createEmployeeSkill","updateEmployeeSkill","OptimizerComponent","apigroup","apijob","jobCount","optimizerClicked","refreshActiveEmployees","refreshActiveJobs","refreshJobCount","retrieveAllActiveEmployees","getOptimizer","getJobCount","item","group","title","start_time","end_time","previousState","groups","items","defaultTimeStart","add","defaultTimeEnd","employeeName","WorkforceApp","basename","path","exact","ListEmployeeSkillComponent","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2ca8b7b0.chunk.js","sourcesContent":["class AuthenticationService {\n    registerSuccessfulLogin(username, password, role) {\n        sessionStorage.setItem('authenticatedUser', username);\n        sessionStorage.setItem('authenticatedRole', role);\n    }\n\n    logout() {\n        sessionStorage.removeItem('authenticatedUser');\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem('authenticatedUser')\n        if(user === null) return false\n        return true\n    }\n\n    isAdminLoggedIn() {\n        let role = sessionStorage.getItem('authenticatedRole')\n        let user = sessionStorage.getItem('authenticatedUser')\n        if(role === \"KBG\" && user !== null) return true\n        return false\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem('authenticatedUser')\n        if(user === null) {\n            return ''\n        } else {\n            return user\n        }\n    }\n}\n\nexport default new AuthenticationService()","import React, {Component} from 'react';\nimport AuthenticationService from '../services/AuthenticationService.js';\nimport {Route, Redirect} from 'react-router-dom';\n\nclass AuthenticatedRoute extends Component {\n    render() {\n        if(AuthenticationService.isUserLoggedIn()) {\n            return <Route {...this.props}/>\n        } else {\n            return <Redirect to=\"/login\"/>\n        }\n    }\n}\n\nexport default AuthenticatedRoute","import axios from 'axios';\n\nconst HOST_API = 'https://workforce-app.herokuapp.com';\nconst SERVICE_API = `${HOST_API}`;\n\nclass LoginService {\n    getLogin(loginData) {\n        return axios.post(`${SERVICE_API}/login`, loginData);\n    }\n}\n\nexport default new LoginService();","import React, {Component} from 'react';\n\nclass FooterComponentList extends Component {\n    render() {\n        return(\n            <footer className=\"footer-list\">\n                <span className=\"text-muted\">All Right Reserved 2019 @Workforce Management Team</span>\n            </footer>\n        )\n    }\n}\n\nexport default FooterComponentList","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport AuthenticationService from '../services/AuthenticationService.js';\n\nclass HeaderComponent extends Component {\n    render() {\n        const isUserLoggedIn = AuthenticationService.isUserLoggedIn();\n        const isAdminLoggedIn = AuthenticationService.isAdminLoggedIn();\n        const getUserLoggedIn = AuthenticationService.getLoggedInUserName();\n\n        return(\n            <header>\n                <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n                    <div><a href=\"https://raharja.ac.id/\" className=\"navbar-brand\">Workforce Management</a></div>\n                    <ul className=\"navbar-nav\"> \n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to={\"/welcome/\" + getUserLoggedIn}>Home</Link></li>}\n                        {isAdminLoggedIn && <li><Link className=\"nav-link\" to=\"/employees\">Employee</Link></li>}\n                        {isAdminLoggedIn && <li><Link className=\"nav-link\" to=\"/employeeSkills\">Employee Skill</Link></li>}\n                        {isAdminLoggedIn && <li><Link className=\"nav-link\" to=\"/roles\">Role</Link></li>}\n                        {isAdminLoggedIn && <li><Link className=\"nav-link\" to=\"/jobs\">Job</Link></li>}\n                        {isAdminLoggedIn && <li><Link className=\"nav-link\" to=\"/shifts\">Shift</Link></li>}\n                        {isAdminLoggedIn && <li><Link className=\"nav-link\" to=\"/skills\">Skill</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/optimizer\">Optimizer</Link></li>}\n                    </ul>\n                    <ul className=\"navbar-nav navbar-collapse justify-content-end\">\n                        {!isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/login\">Login</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/logout\" onClick={AuthenticationService.logout}>Logout</Link></li>}\n                    </ul>\n                </nav>\n            </header>\n        )\n    }\n}\n\nexport default HeaderComponent","import React, {Component} from 'react';\nimport AuthenticationService from '../services/AuthenticationService.js';\nimport LoginService from '../services/LoginService.js';\nimport './LoginComponent.css';\nimport FooterComponentList from '../views/FooterComponentList.jsx';\nimport HeaderComponent from '../views/HeaderComponent.jsx';\n\nclass LoginComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            email: '',\n            password: '',\n            role:'',\n            hasLoginFailed: false,\n            showSuccessMessage: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.loginClicked = this.loginClicked.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({[event.target.name]:event.target.value})\n    }\n\n    loginClicked() {\n        LoginService.getLogin({\n            email:this.state.email,\n            password:this.state.password\n        })\n        .then((resp) => {\n            console.log(\"Success Login: \" + resp.data[1])\n            if(resp.data[0]) {\n                AuthenticationService.registerSuccessfulLogin(resp.data[1], this.state.password, resp.data[2]);\n                this.props.history.push(`welcome/${resp.data[1]}`)\n            } else {\n                if(this.state.email === \"fitri.andriyani\" && this.state.password === \"keepsecret\") {\n                    console.log(\"Success Login Admin\")\n                    AuthenticationService.registerSuccessfulLogin(this.state.email, this.state.password, \"KBG\");\n                    this.props.history.push(`welcome/${this.state.email}`)\n                } else {\n                    console.log(\"Failed Login\")\n                    this.setState({showSuccessMessage:false})\n                    this.setState({hasLoginFailed:true})\n                }                \n            }            \n        })\n        .catch(() => {\n            console.log(\"Catch Success Login\")\n            if(this.state.email === \"fitri.andriyani\" && this.state.password === \"keepsecret\") {\n                console.log(\"Success Login Admin\")\n                AuthenticationService.registerSuccessfulLogin(this.state.email, this.state.password, \"KBG\");\n                this.props.history.push(`welcome/${this.state.email}`)\n            } else {\n                console.log(\"Failed Login\")\n                this.setState({showSuccessMessage:false})\n                this.setState({hasLoginFailed:true})\n            }\n        })\n    }\n\n    render() {\n        return(\n            <>\n            <HeaderComponent/>\n            <div className=\"row\">                \n                <div className=\"col-md-4\">\n                </div>\n                <div className=\"col-md-4\">\n                    {this.state.hasLoginFailed && <div className=\"alert alert-primary\">Invalid Credentials</div>}\n                    <div className=\"container-gray\">\n                        <div className=\"col login-sec\">\n                            <h2 className=\"text-center\">Sign In</h2>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"usr\">Email:</label>\n                                    <input type=\"text\" id=\"usr\" className=\"form-control\" name=\"email\" value={this.state.email} onChange={this.handleChange} />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"pwd\">Password:</label>\n                                    <input type=\"password\" id=\"pwd\" className=\"form-control\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\n                                    <br/>\n                                    <button className=\"btn btn-primary\" onClick={this.loginClicked}>\n                                        Submit\n                                    </button>\n                                </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-md-4\">\n                </div>\n                <FooterComponentList/>\n            </div>\n            </>\n        )\n    }\n}\n\nexport default LoginComponent","import React, {Component} from 'react';\n\nclass FooterComponent extends Component {\n    render() {\n        return(\n            <footer className=\"footer\">\n                <span className=\"text-muted\">All Right Reserved 2019 @Workforce Management Team</span>\n            </footer>\n        )\n    }\n}\n\nexport default FooterComponent","import axios from 'axios';\n\nconst HOST_API = 'https://workforce-app.herokuapp.com';\nconst SERVICE_API = `${HOST_API}`;\n\nclass OptimizerService {\n    getOptimizer() {\n        return axios.get(`${SERVICE_API}/optimizer`);\n    }\n\n    getJobCount() {\n        return axios.get(`${SERVICE_API}/job-count`);\n    }\n\n    getJobCategoryCount() {\n        return axios.get(`${SERVICE_API}/job-category-count`);\n    }\n\n    getJobEmployeeCount() {\n        return axios.get(`${SERVICE_API}/job-employee-count`);\n    }\n}\n\nexport default new OptimizerService();","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Button from 'react-bootstrap/Button';\nimport FooterComponent from './FooterComponent.jsx';\nimport HeaderComponent from '../views/HeaderComponent.jsx';\nimport Chart from \"react-apexcharts\";\nimport OptimizerService from '../services/OptimizerService.js';\n\nclass WelcomeComponent extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            pieoptions: {\n                chart: {\n                    id: \"basic-line\"\n                },\n                xaxis: {\n                    categories: [\"Dede\", \"Yang Mi\", \"Nurrahma\", \"Yunita\", \"Ayu\", \"Vena\", \"Nasya\"]\n                }\n            },\n            pieseries: [\n                {\n                    name: \"series\",\n                    data: [45, 50, 49, 60, 70, 91, 50]\n                }\n            ],\n            series: [],\n            chartOptions: {\n                labels: ['Follow Up', 'Promosi', 'Stand By']\n            }\n        }\n        this.refreshJobCategoryCount = this.refreshJobCategoryCount.bind(this);\n        this.refreshJobEmployeeCount = this.refreshJobEmployeeCount.bind(this);\n    }\n\n    componentDidMount() {\n        this.refreshJobCategoryCount();\n        this.refreshJobEmployeeCount(); \n    }\n\n    refreshJobCategoryCount() {\n        OptimizerService.getJobCategoryCount()\n        .then(\n            response => {\n                this.setState({series:response.data})\n            }\n        )\n    }\n\n    refreshJobEmployeeCount() {\n        OptimizerService.getJobEmployeeCount()\n        .then(\n            response => {\n                this.setState({pieseries:response.data})\n            }\n        )\n    }\n\n    render() {\n        return(\n            <>\n                <HeaderComponent/>\n                <Jumbotron>\n                    {<h1>Welcome {this.props.match.params.name}</h1>}\n                    <p>\n                        This is a workforce management application, You can manage your employees <Link to=\"/employees\">here</Link>.\n                    </p>\n                    <p>\n                        You can manage job for your employees <Link to=\"/jobs\">here</Link>.\n                    </p>\n                </Jumbotron>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-6\">\n                            <Chart options={this.state.chartOptions} series={this.state.series} type=\"pie\" width=\"400\" />\n                        </div>\n                        <div className=\"col-md-6\">\n                            <Chart\n                                options={this.state.pieoptions}\n                                series={this.state.pieseries}\n                                type=\"line\"\n                                width=\"500\"\n                            />\n                        </div>\n                    </div>\n                </div>                \n                <hr/>\n                <FooterComponent/>\n            </>\n        )\n    }\n}\n\nexport default WelcomeComponent","import React from 'react';\n\nfunction ErrorComponent() {\n    return <div>An errror occured!</div>\n}\n\nexport default ErrorComponent","import React, {Component} from 'react';\nimport HeaderComponent from '../views/HeaderComponent.jsx';\n\nclass LogoutComponent extends Component {\n    render() {\n        return(\n            <>\n                <HeaderComponent/>\n                <h1>You are logged out</h1>\n                <div className=\"container\">\n                    Thank Your for Using Our Application\n                </div>\n            </>\n        )\n    }\n}\n\nexport default LogoutComponent","import axios from 'axios';\n\nconst HOST_API = 'https://workforce-app.herokuapp.com';\nconst SERVICE_API = `${HOST_API}/employees`;\n\nclass EmployeeDataService {\n    retrieveAllEmployees(name) {\n        return axios.get(`${SERVICE_API}/list`,);\n    }\n    retrieveAllActiveEmployees() {\n        return axios.get(`${SERVICE_API}/list/active`,);\n    }\n    deleteEmployee(id) {\n        return axios.delete(`${SERVICE_API}/${id}`);\n    }\n    retrieveEmployee(id) {\n        return axios.get(`${SERVICE_API}/${id}`);\n    }\n    updateEmployee(id, todo) {\n        return axios.put(`${SERVICE_API}/${id}`, todo);\n    }\n    createEmployee(todo) {\n        return axios.post(`${SERVICE_API}`, todo);\n    }\n}\n\nexport default new EmployeeDataService();","import React, {Component} from 'react';\nimport Table from 'react-bootstrap/Table';\nimport EmployeeDataService from '../services/EmployeeDataService.js';\nimport FooterComponentList from './FooterComponentList.jsx';\nimport HeaderComponent from '../views/HeaderComponent.jsx';\n\nclass ListEmployeeComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            employees: [],\n            message:\"\"\n        }\n        this.refreshEmployees = this.refreshEmployees.bind(this);\n        this.deleteEmployeeClicked = this.deleteEmployeeClicked.bind(this);\n        this.updateEmployeeClicked = this.updateEmployeeClicked.bind(this);\n        this.addEmployeeClicked = this.addEmployeeClicked.bind(this);\n    }\n\n    componentDidMount() {\n        this.refreshEmployees();\n    }\n\n    refreshEmployees() {\n        EmployeeDataService.retrieveAllEmployees(\"name\")\n            .then(\n                response => {\n                    this.setState({employees: response.data})\n                }\n            )\n    }\n\n    deleteEmployeeClicked(id, name) {\n        EmployeeDataService.deleteEmployee(id)\n            .then(\n                response => {\n                    this.setState({message: `Delete of employee ${name} Successful`})\n                    this.refreshEmployees()\n                }\n            )\n    }\n\n    updateEmployeeClicked(id) {\n        console.log(\"Update: \" + id)\n        this.props.history.push(`/employee/${id}`)\n    }\n\n    addEmployeeClicked() {\n        this.props.history.push('/employee/-1')\n    }\n\n    render() {\n        return(\n            <div>\n                <HeaderComponent/>\n                <h3>List Employee</h3>\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <Table bordered striped hover size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>Employee ID</th>\n                                <th>Name</th>\n                                <th>Username</th>\n                                <th>Address</th>\n                                <th>Email</th>\n                                <th>Role</th>\n                                <th>Status</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.employees.map (\n                                    employee => \n                                    <tr key={employee.employeeId}>\n                                        <td>{employee.employeeId}</td>\n                                        <td>{employee.name}</td>\n                                        <td>{employee.username}</td>\n                                        <td>{employee.address}</td>\n                                        <td>{employee.email}</td>\n                                        <td>{employee.roleCode.roleName}</td>\n                                        <td>{employee.employeeStatus}</td>\n                                        <td><button className=\"btn btn-sm btn-info\" onClick={() => this.updateEmployeeClicked(employee.employeeId)}>Update</button></td>\n                                        <td><button className=\"btn btn-sm btn-danger\" onClick={() => this.deleteEmployeeClicked(employee.employeeId, employee.name)}>Delete</button></td>\n                                    </tr>\n                                )\n                            }                        \n                        </tbody>\n                    </Table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-info\" onClick={() => this.addEmployeeClicked()}>Add</button>\n                    </div>\n                </div>\n                <FooterComponentList/>\n            </div>\n        )\n    }\n}\n\nexport default ListEmployeeComponent","import React, {Component} from 'react';\nimport moment from 'moment';\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\nimport EmployeeDataService from '../services/EmployeeDataService.js';\nimport FooterComponent from './FooterComponent.jsx';\nimport HeaderComponent from '../views/HeaderComponent.jsx';\n\nclass EmployeeComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.match.params.id,\n            employeeId: '',\n            name: '',\n            username: '',\n            password: '',\n            birthPlace: '',\n            birthDate: '',\n            address: '',\n            gender: '',\n            phoneNumber: '',\n            email: '',\n            joinDate: '',\n            resignationDate: '',\n            employeeStatus: ''\n        }\n        this.onSubmit = this.onSubmit.bind(this);\n        this.validate = this.validate.bind(this);\n    }\n\n    componentDidMount() {\n\n        if(this.state.id === -1) {\n            return\n        }\n\n        EmployeeDataService.retrieveEmployee(this.state.id)\n        .then(response => this.setState({\n            employeeId:response.data.employeeId,\n            name:response.data.name,\n            username:response.data.username,\n            password:response.data.password,\n            birthPlace:response.data.birthPlace,\n            birthDate:moment(response.data.birthDate).format('YYYY-MM-DD'),\n            address:response.data.address,\n            gender:response.data.gender,\n            phoneNumber:response.data.phoneNumber,\n            email:response.data.email,\n            joinDate:moment(response.data.joinDate).format('YYYY-MM-DD'),\n            resignationDate:moment(response.data.resignationDate).format('YYYY-MM-DD'),\n            employeeStatus:response.data.employeeStatus\n        }))\n    }\n\n    validate(values) {\n        let errors = {}\n        \n        if(!values.name) {\n            errors.name = 'Enter an employee name'           \n        } else if(values.name.length < 4) {\n            errors.name = 'Enter at least 4 characters for employee name'\n        }\n\n        if(!values.username) {\n            errors.nip = 'Enter a NIP'           \n        } else if(values.nip.length < 4) {\n            errors.nip = 'Enter at least 4 characters for employee username'\n        }\n\n        return errors;\n    }\n\n    onSubmit(values) {\n\n        if(this.state.id === '-1') {\n            console.log(\"Create\")\n            EmployeeDataService.createEmployee({\n                employeeId:values.employeeId,\n                name:values.name,\n                username:values.username,\n                password:values.password,\n                birthPlace:values.birthPlace,\n                birthDate:values.birthDate,\n                address:values.address,\n                gender:values.gender,\n                phoneNumber:values.phoneNumber,\n                email:values.email,\n                joinDate:values.joinDate,\n                resignationDate:'',\n                employeeStatus:values.employeeStatus,\n                roleCode:values.roleCode\n            }).then(() => this.props.history.push('/employees'))\n        } else {\n            console.log(\"Update\")\n            EmployeeDataService.updateEmployee(this.state.id, {\n                employeeId:values.employeeId,\n                name:values.name,\n                username:values.username,\n                password:values.password,\n                birthPlace:values.birthPlace,\n                birthDate:values.birthDate,\n                address:values.address,\n                gender:values.gender,\n                phoneNumber:values.phoneNumber,\n                email:values.email,\n                joinDate:values.joinDate,\n                resignationDate:'',\n                employeeStatus:values.employeeStatus,\n                roleCode:values.roleCode\n            }).then(() => this.props.history.push('/employees'))\n        }\n    }\n\n    render() {\n        let {employeeId, name, username, password, birthPlace, birthDate, address, gender, phoneNumber, email, joinDate, resignationDate, employeeStatus, roleCode} = this.state\n\n        return (\n            <div>\n                <HeaderComponent/>\n                <h4>New Employee Form</h4>\n                <hr/>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-1\">\n                        </div>\n                        <div className=\"col-md-10\">\n                            <Formik \n                                initialValues={{employeeId, name, username, password, birthPlace, birthDate, address, gender, phoneNumber, email, joinDate, resignationDate, employeeStatus, roleCode}}\n                                onSubmit={this.onSubmit}\n                                validateOnChange={false}\n                                validateOnBlur={false}\n                                validate={this.validate}\n                                enableReinitialize={true}\n                            >\n                                {\n                                    (props) => (\n                                        <Form>\n                                            <ErrorMessage name=\"name\" component=\"div\" className=\"alert alert-warning\"/>                                            \n                                            <ErrorMessage name=\"username\" component=\"div\" className=\"alert alert-warning\"/>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-6\">\n                                                    <fieldset className=\"form-group\">\n                                                        <label>Employee ID</label>\n                                                        <Field className=\"form-control\" type=\"text\" name=\"employeeId\"/>\n                                                    </fieldset>\n                                                    <fieldset className=\"form-group\">\n                                                        <label>Name</label>\n                                                        <Field className=\"form-control\" type=\"text\" name=\"name\"/>\n                                                    </fieldset>\n                                                    <fieldset className=\"form-group\">\n                                                        <label>Username</label>\n                                                        <Field className=\"form-control\" type=\"text\" name=\"username\"/>\n                                                    </fieldset>\n                                                    <fieldset className=\"form-group\">\n                                                        <label>Password</label>\n                                                        <Field className=\"form-control\" type=\"password\" name=\"password\"/>\n                                                    </fieldset>\n                                                    <fieldset className=\"form-group\">\n                                                        <label>Birth Place</label>\n                                                        <Field className=\"form-control\" type=\"text\" name=\"birthPlace\"/>\n                                                    </fieldset>\n                                                    <fieldset className=\"form-group\">\n                                                        <label>Birth Date</label>\n                                                        <Field className=\"form-control\" type=\"date\" name=\"birthDate\"/>\n                                                    </fieldset>\n                                                    <fieldset className=\"form-group\">\n                                                        <label>Address</label>\n                                                        <Field className=\"form-control\" type=\"text\" name=\"address\"/>\n                                                    </fieldset>\n                                                </div>\n                                                <div className=\"col-md-6\">                                            \n                                                    <fieldset className=\"form-group\">\n                                                        <label>Gender</label>\n                                                        <Field className=\"form-control\" type=\"text\" name=\"gender\"/>\n                                                    </fieldset>\n                                                    <fieldset className=\"form-group\">\n                                                        <label>Phone Number</label>\n                                                        <Field className=\"form-control\" type=\"text\" name=\"phoneNumber\"/>\n                                                    </fieldset>\n                                                    <fieldset className=\"form-group\">\n                                                        <label>Email</label>\n                                                        <Field className=\"form-control\" type=\"text\" name=\"email\"/>\n                                                    </fieldset>\n                                                    <fieldset className=\"form-group\">\n                                                        <label>Join Date</label>\n                                                        <Field className=\"form-control\" type=\"date\" name=\"joinDate\"/>\n                                                    </fieldset>\n                                                    <fieldset className=\"form-group\">\n                                                        <label>Resignation Date</label>\n                                                        <Field className=\"form-control\" type=\"date\" name=\"resignationDate\"/>\n                                                    </fieldset>\n                                                    <fieldset className=\"form-group\">\n                                                        <label>Employee Status</label>\n                                                        <Field className=\"form-control\" type=\"text\" name=\"employeeStatus\"/>\n                                                    </fieldset>\n                                                    <fieldset className=\"form-group\">\n                                                        <label>Role</label>\n                                                        <Field className=\"form-control\" type=\"text\" name=\"roleCode\"/>\n                                                    </fieldset>\n                                                </div>                                                \n                                            </div>                                            \n                                            <button className=\"btn btn-success\" type=\"submit\">Save</button>                                            \n                                        </Form>\n                                    )                        \n                                }\n                            </Formik>\n                        </div>\n                        <div className=\"col-md-1\">\n                        </div>\n                    </div>                    \n                </div>\n                <br/>\n                <FooterComponent/>\n            </div>            \n        )\n    }\n}\n\nexport default EmployeeComponent","import axios from 'axios';\n\nconst HOST_API = 'https://workforce-app.herokuapp.com';\nconst SERVICE_API = `${HOST_API}/jobs`;\n\nclass JobDataService {\n    retrieveAllJobs(name) {\n        return axios.get(`${SERVICE_API}/list`);\n    }\n    deleteJob(id) {\n        return axios.delete(`${SERVICE_API}/${id}`);\n    }\n    retrieveJob(id) {\n        return axios.get(`${SERVICE_API}/${id}`);\n    }\n    updateJob(id, todo) {\n        return axios.put(`${SERVICE_API}/${id}`, todo);\n    }\n    createJob(todo) {\n        return axios.post(`${SERVICE_API}`, todo);\n    }\n}\n\nexport default new JobDataService();","import React, {Component} from 'react';\nimport Table from 'react-bootstrap/Table';\nimport JobDataService from '../services/JobDataService.js';\nimport FooterComponentList from './FooterComponentList.jsx';\nimport HeaderComponent from '../views/HeaderComponent.jsx';\n\nclass ListJobComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            jobs: [],\n            message:\"\"\n        }\n        this.refreshJobs = this.refreshJobs.bind(this);\n        this.deleteJobClicked = this.deleteJobClicked.bind(this);\n        this.updateJobClicked = this.updateJobClicked.bind(this);\n        this.addJobClicked = this.addJobClicked.bind(this);\n    }\n\n    componentDidMount() {\n        this.refreshJobs();\n    }\n\n    refreshJobs() {\n        JobDataService.retrieveAllJobs(\"name\")\n            .then(\n                response => {\n                    this.setState({jobs: response.data})\n                }\n            )\n    }\n\n    deleteJobClicked(id, name) {\n        JobDataService.deleteJob(id)\n            .then(\n                response => {\n                    this.setState({message: `Delete of job ${name} Successful`})\n                    this.refreshJobs()\n                }\n            )\n    }\n\n    updateJobClicked(id) {\n        console.log(\"Update: \" + id)\n        this.props.history.push(`/job/${id}`)\n    }\n\n    addJobClicked() {\n        this.props.history.push('/job/-1')\n    }\n\n    render() {\n        return(\n            <div>\n                <HeaderComponent/>\n                <h3>List Job</h3>\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <Table bordered striped hover size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>Job Code</th>\n                                <th>Job Description</th>\n                                <th>Shift</th>\n                                <th>Activity Date</th>\n                                <th>Start</th>\n                                <th>End</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.jobs.map (\n                                    job => \n                                    <tr key={job.jobCode}>\n                                        <td>{job.jobCode}</td>\n                                        <td>{job.jobDescription}</td>\n                                        <td>{job.shiftCode}</td>\n                                        <td>{job.activityDate}</td>\n                                        <td>{job.startTime}</td>\n                                        <td>{job.endTime}</td>\n                                        <td><button className=\"btn btn-sm btn-info\" onClick={() => this.updateJobClicked(job.jobCode)}>Update</button></td>\n                                        <td><button className=\"btn btn-sm btn-danger\" onClick={() => this.deleteJobClicked(job.jobCode, job.jobCode)}>Delete</button></td>\n                                    </tr>\n                                )\n                            }                        \n                        </tbody>\n                    </Table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-info\" onClick={() => this.addJobClicked()}>Add</button>\n                    </div>\n                </div>\n                <FooterComponentList/>\n            </div>\n        )\n    }\n}\n\nexport default ListJobComponent","import React, {Component} from 'react';\nimport moment from 'moment';\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\nimport JobDataService from '../services/JobDataService.js';\nimport FooterComponentList from './FooterComponentList.jsx';\nimport HeaderComponent from '../views/HeaderComponent.jsx';\n\nclass JobComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.match.params.id,\n            jobCode: '',\n            jobDescription: '',\n            shiftCode: '',\n            activityDate: '',\n            instance: '',\n            classCount: '',\n            startTime: '',\n            endTime: '',\n            employeeId: ''\n        }\n        this.onSubmit = this.onSubmit.bind(this);\n        this.validate = this.validate.bind(this);\n    }\n\n    componentDidMount() {\n\n        if(this.state.id === -1) {\n            return\n        }\n\n        JobDataService.retrieveJob(this.state.id)\n        .then(response => this.setState({\n            jobCode:response.data.jobCode,\n            jobDescription:response.data.jobDescription,\n            shiftCode:response.data.shiftCode,\n            activityDate:moment(response.data.activityDate).format('YYYY-MM-DD'),\n            instance:response.data.instance,\n            classCount:response.data.classCount,\n            startTime:response.data.startTime,\n            endTime:response.data.endTime,\n            employeeId:response.data.employeeId\n        }))\n    }\n\n    validate(values) {\n        let errors = {}\n        \n        if(!values.jobDescription) {\n            errors.jobDescription = 'Enter a job description'           \n        } else if(values.jobDescription.length < 7) {\n            errors.jobDescription = 'Enter at least 7 characters for job description'\n        }\n\n        if(!values.jobCode) {\n            errors.jobCode = 'Enter a job code'           \n        } else if(values.jobCode.length < 1) {\n            errors.jobCode = 'Enter at least 1 characters for job code'\n        }\n\n        return errors;\n    }\n\n    onSubmit(values) {\n        console.log(\"Here\")\n        if(this.state.id === '-1') {\n            console.log(\"Create\")\n            JobDataService.createJob({\n                jobCode:values.jobCode,\n                jobDescription:values.jobDescription,\n                shiftCode:values.shiftCode,\n                activityDate:values.activityDate,\n                instance:values.instance,\n                classCount:values.classCount,\n                startTime:values.startTime,\n                endTime:values.endTime,\n                employeeId:values.employeeId\n            }).then(() => this.props.history.push('/jobs'))\n        } else {\n            console.log(\"Update\")\n            JobDataService.updateJob(this.state.id, {\n                jobCode:values.jobCode,\n                jobDescription:values.jobDescription,\n                shiftCode:values.shiftCode,\n                activityDate:values.activityDate,\n                instance:values.instance,\n                classCount:values.classCount,\n                startTime:values.startTime,\n                endTime:values.endTime,\n                employeeId:values.employeeId\n            }).then(() => this.props.history.push('/jobs'))\n        }\n    }\n\n    render() {\n        let {jobCode, jobDescription, shiftCode, activityDate, instance, classCount, startTime, endTime, employeeId} = this.state\n\n        return (\n            <div>\n                <HeaderComponent/>\n                <h4>New Job Form</h4>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-1\">\n                        </div>\n                        <div className=\"col-md-10\">\n                            <Formik \n                                initialValues={{jobCode, jobDescription, shiftCode, activityDate, instance, classCount, startTime, endTime, employeeId}}\n                                onSubmit={this.onSubmit}\n                                validateOnChange={false}\n                                validateOnBlur={false}\n                                validate={this.validate}\n                                enableReinitialize={true}\n                            >\n                                {\n                                    (props) => (\n                                        <Form>\n                                            <ErrorMessage name=\"jobDescription\" component=\"div\" className=\"alert alert-warning\"/>                                            \n                                            <ErrorMessage name=\"jobCode\" component=\"div\" className=\"alert alert-warning\"/>\n                                            <div className=\"row\">\n                                                <div className=\"col-md-6\">\n                                                    <fieldset className=\"form-group\">\n                                                        <label>Job Code</label>\n                                                        <Field className=\"form-control\" type=\"text\" name=\"jobCode\"/>\n                                                    </fieldset>\n                                                    <fieldset className=\"form-group\">\n                                                        <label>Job Description</label>\n                                                        <Field className=\"form-control\" type=\"text\" name=\"jobDescription\"/>\n                                                    </fieldset>\n                                                    <fieldset className=\"form-group\">\n                                                        <label>Shift Code</label>\n                                                        <Field className=\"form-control\" type=\"text\" name=\"shiftCode\"/>\n                                                    </fieldset>\n                                                    <fieldset className=\"form-group\">\n                                                        <label>Activity Date</label>\n                                                        <Field className=\"form-control\" type=\"date\" name=\"activityDate\"/>\n                                                    </fieldset>\n                                                </div>\n                                                <div className=\"col-md-6\">\n                                                    <fieldset className=\"form-group\">\n                                                        <label>Instance</label>\n                                                        <Field className=\"form-control\" type=\"text\" name=\"instance\"/>\n                                                    </fieldset>\n                                                    <fieldset className=\"form-group\">\n                                                        <label>Class Count</label>\n                                                        <Field className=\"form-control\" type=\"text\" name=\"classCount\"/>\n                                                    </fieldset>\n                                                    <fieldset className=\"form-group\">\n                                                        <label>Start Time</label>\n                                                        <Field className=\"form-control\" type=\"time\" name=\"startTime\"/>\n                                                    </fieldset>\n                                                    <fieldset className=\"form-group\">\n                                                        <label>End Time</label>\n                                                        <Field className=\"form-control\" type=\"time\" name=\"endTime\"/>\n                                                    </fieldset>\n                                                </div>\n                                            </div>                                                                              \n                                            <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                        </Form>\n                                    )                        \n                                }\n                            </Formik>\n                        </div>\n                        <div className=\"col-md-1\">\n                        </div>\n                    </div>                    \n                </div>\n                <br/>\n                <FooterComponentList/>\n            </div>\n        )\n    }\n}\n\nexport default JobComponent","import axios from 'axios';\n\nconst HOST_API = 'https://workforce-app.herokuapp.com';\nconst SERVICE_API = `${HOST_API}/shifts`;\n\nclass ShiftDataService {\n    retrieveAllShifts(name) {\n        return axios.get(`${SERVICE_API}/list`);\n    }\n    deleteShift(id) {\n        return axios.delete(`${SERVICE_API}/${id}`);\n    }\n    retrieveShift(id) {\n        return axios.get(`${SERVICE_API}/${id}`);\n    }\n    updateShift(id, todo) {\n        return axios.put(`${SERVICE_API}/${id}`, todo);\n    }\n    createShift(todo) {\n        return axios.post(`${SERVICE_API}`, todo);\n    }\n}\n\nexport default new ShiftDataService();","import React, {Component} from 'react';\nimport Table from 'react-bootstrap/Table';\nimport ShiftDataService from '../services/ShiftDataService.js';\nimport FooterComponentList from './FooterComponentList.jsx';\nimport HeaderComponent from '../views/HeaderComponent.jsx';\n\nclass ListShiftComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            shifts: [],\n            message:\"\"\n        }\n        this.refreshShifts = this.refreshShifts.bind(this);\n        this.deleteShiftClicked = this.deleteShiftClicked.bind(this);\n        this.updateShiftClicked = this.updateShiftClicked.bind(this);\n        this.addShiftClicked = this.addShiftClicked.bind(this);\n    }\n\n    componentDidMount() {\n        this.refreshShifts();\n    }\n\n    refreshShifts() {\n        ShiftDataService.retrieveAllShifts(\"name\")\n            .then(\n                response => {\n                    this.setState({shifts: response.data})\n                }\n            )\n    }\n\n    deleteShiftClicked(id, name) {\n        ShiftDataService.deleteShift(id)\n            .then(\n                response => {\n                    this.setState({message: `Delete of shift ${name} Successful`})\n                    this.refreshShifts()\n                }\n            )\n    }\n\n    updateShiftClicked(id) {\n        console.log(\"Update: \" + id)\n        this.props.history.push(`/shift/${id}`)\n    }\n\n    addShiftClicked() {\n        this.props.history.push('/shift/-1')\n    }\n\n    render() {\n        return(\n            <div>\n                <HeaderComponent/>\n                <h3>List Shift</h3>\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <Table bordered striped hover size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>Shift Code</th>\n                                <th>Shift Name</th>\n                                <th>Start Time</th>\n                                <th>End Time</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.shifts.map (\n                                    shift => \n                                    <tr key={shift.shiftCode}>\n                                        <td>{shift.shiftCode}</td>\n                                        <td>{shift.shiftName}</td>\n                                        <td>{shift.startTime}</td>\n                                        <td>{shift.endTime}</td>\n                                        <td><button className=\"btn btn-sm btn-info\" onClick={() => this.updateShiftClicked(shift.shiftCode)}>Update</button></td>\n                                        <td><button className=\"btn btn-sm btn-danger\" onClick={() => this.deleteShiftClicked(shift.shiftCode, shift.shiftName)}>Delete</button></td>\n                                    </tr>\n                                )\n                            }                        \n                        </tbody>\n                    </Table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-info\" onClick={() => this.addShiftClicked()}>Add</button>\n                    </div>\n                </div>\n                <FooterComponentList/>\n            </div>\n        )\n    }\n}\n\nexport default ListShiftComponent","import React, {Component} from 'react';\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\nimport ShiftDataService from '../services/ShiftDataService.js';\nimport FooterComponentList from './FooterComponentList.jsx';\nimport HeaderComponent from '../views/HeaderComponent.jsx';\n\nclass ShiftComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.match.params.id,\n            shiftCode: '',\n            shiftName: '',\n            startTime: '',\n            endTime: ''\n        }\n        this.onSubmit = this.onSubmit.bind(this);\n        this.validate = this.validate.bind(this);\n    }\n\n    componentDidMount() {\n\n        if(this.state.id === -1) {\n            return\n        }\n\n        ShiftDataService.retrieveShift(this.state.id)\n        .then(response => this.setState({\n            shiftCode:response.data.shiftCode,\n            shiftName:response.data.shiftName,\n            startTime:response.data.startTime,\n            endTime:response.data.endTime\n        }))\n    }\n\n    validate(values) {\n        let errors = {}\n        \n        if(!values.shiftCode) {\n            errors.shiftCode = 'Enter a shift code'           \n        } else if(values.shiftCode.length < 1) {\n            errors.shiftCode = 'Enter at least 1 characters for shift code'\n        }\n\n        if(!values.shiftName) {\n            errors.shiftName = 'Enter a shift name'           \n        } else if(values.shiftName.length < 4) {\n            errors.shiftName = 'Enter at least 4 characters for shift name'\n        }\n\n        return errors;\n    }\n\n    onSubmit(values) {\n        console.log(\"Here\")\n        if(this.state.id === '-1') {\n            console.log(\"Create\")\n            ShiftDataService.createShift({\n                shiftCode:values.shiftCode,\n                shiftName:values.shiftName,\n                startTime:values.startTime,\n                endTime:values.endTime\n            }).then(() => this.props.history.push('/shifts'))\n        } else {\n            console.log(\"Update\")\n            ShiftDataService.updateShift(this.state.id, {\n                shiftCode:values.shiftCode,\n                shiftName:values.shiftName,\n                startTime:values.startTime,\n                endTime:values.endTime\n            }).then(() => this.props.history.push('/shifts'))\n        }\n    }\n\n    render() {\n        let {shiftCode, shiftName, startTime, endTime} = this.state\n\n        return (\n            <div>\n                <HeaderComponent/>\n                <h4>New Shift Form</h4>\n                <hr/>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-3\">\n                        </div>\n                        <div className=\"col-md-6\">\n                            <Formik \n                                initialValues={{shiftCode, shiftName, startTime, endTime}}\n                                onSubmit={this.onSubmit}\n                                validateOnChange={false}\n                                validateOnBlur={false}\n                                validate={this.validate}\n                                enableReinitialize={true}\n                            >\n                                {\n                                    (props) => (\n                                        <Form>\n                                            <ErrorMessage name=\"shiftCode\" component=\"div\" className=\"alert alert-warning\"/>                                            \n                                            <ErrorMessage name=\"shiftName\" component=\"div\" className=\"alert alert-warning\"/>\n                                            <fieldset className=\"form-group\">\n                                                <label>Shift Code</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"shiftCode\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Shift Name</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"shiftName\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Start Time</label>\n                                                <Field className=\"form-control\" type=\"time\" name=\"startTime\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>End Time</label>\n                                                <Field className=\"form-control\" type=\"time\" name=\"endTime\"/>\n                                            </fieldset>\n                                            <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                        </Form>\n                                    )                        \n                                }\n                            </Formik>\n                        </div>\n                        <div className=\"col-md-3\">\n                        </div>\n                    </div>                    \n                </div>\n                <FooterComponentList/>\n            </div>\n        )\n    }\n}\n\nexport default ShiftComponent","import axios from 'axios';\n\nconst HOST_API = 'https://workforce-app.herokuapp.com';\nconst SERVICE_API = `${HOST_API}/skills`;\n\nclass SkillDataService {\n    retrieveAllSkills(name) {\n        return axios.get(`${SERVICE_API}/list`);\n    }\n    deleteSkill(id) {\n        return axios.delete(`${SERVICE_API}/${id}`);\n    }\n    retrieveSkill(id) {\n        return axios.get(`${SERVICE_API}/${id}`);\n    }\n    updateSkill(id, todo) {\n        return axios.put(`${SERVICE_API}/${id}`, todo);\n    }\n    createSkill(todo) {\n        return axios.post(`${SERVICE_API}`, todo);\n    }\n}\n\nexport default new SkillDataService();","import React, {Component} from 'react';\nimport Table from 'react-bootstrap/Table';\nimport SkillDataService from '../services/SkillDataService.js';\nimport FooterComponentList from './FooterComponentList.jsx';\nimport HeaderComponent from '../views/HeaderComponent.jsx';\n\nclass ListSkillComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            skills: [],\n            message:\"\"\n        }\n        this.refreshSkills = this.refreshSkills.bind(this);\n        this.deleteSkillClicked = this.deleteSkillClicked.bind(this);\n        this.updateSkillClicked = this.updateSkillClicked.bind(this);\n        this.addSkillClicked = this.addSkillClicked.bind(this);\n    }\n\n    componentDidMount() {\n        this.refreshSkills();\n    }\n\n    refreshSkills() {\n        SkillDataService.retrieveAllSkills(\"name\")\n            .then(\n                response => {\n                    this.setState({skills: response.data})\n                }\n            )\n    }\n\n    deleteSkillClicked(id, name) {\n        SkillDataService.deleteSkill(id)\n            .then(\n                response => {\n                    this.setState({message: `Delete of skill ${name} Successful`})\n                    this.refreshSkills()\n                }\n            )\n    }\n\n    updateSkillClicked(id) {\n        console.log(\"Update: \" + id)\n        this.props.history.push(`/skill/${id}`)\n    }\n\n    addSkillClicked() {\n        this.props.history.push('/skill/-1')\n    }\n\n    render() {\n        return(\n            <div>\n                <HeaderComponent/>\n                <h3>List Skill</h3>\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <Table bordered striped hover size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>Skill Code</th>\n                                <th>Skill Name</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.skills.map (\n                                    skill => \n                                    <tr key={skill.skillCode}>\n                                        <td>{skill.skillCode}</td>\n                                        <td>{skill.skillName}</td>\n                                        <td><button className=\"btn btn-sm btn-info\" onClick={() => this.updateSkillClicked(skill.skillCode)}>Update</button></td>\n                                        <td><button className=\"btn btn-sm btn-danger\" onClick={() => this.deleteSkillClicked(skill.skillCode, skill.skillName)}>Delete</button></td>\n                                    </tr>\n                                )\n                            }                        \n                        </tbody>\n                    </Table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-info\" onClick={() => this.addSkillClicked()}>Add</button>\n                    </div>\n                </div>\n                <FooterComponentList/>\n            </div>\n        )\n    }\n}\n\nexport default ListSkillComponent","import React, {Component} from 'react';\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\nimport SkillDataService from '../services/SkillDataService.js';\nimport FooterComponentList from './FooterComponentList.jsx';\nimport HeaderComponent from '../views/HeaderComponent.jsx';\n\nclass SkillComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.match.params.id,\n            skillCode: '',\n            skillName: ''        }\n        this.onSubmit = this.onSubmit.bind(this);\n        this.validate = this.validate.bind(this);\n    }\n\n    componentDidMount() {\n\n        if(this.state.id === -1) {\n            return\n        }\n\n        SkillDataService.retrieveSkill(this.state.id)\n        .then(response => this.setState({\n            skillCode:response.data.skillCode,\n            skillName:response.data.skillName\n        }))\n    }\n\n    validate(values) {\n        let errors = {}\n        \n        if(!values.skillCode) {\n            errors.skillCode = 'Enter a skill code'           \n        } else if(values.skillCode.length < 1) {\n            errors.skillCode = 'Enter at least 1 characters for skill code'\n        }\n\n        if(!values.skillName) {\n            errors.skillName = 'Enter a skill name'           \n        } else if(values.skillName.length < 4) {\n            errors.skillName = 'Enter at least 4 characters for skill name'\n        }\n\n        return errors;\n    }\n\n    onSubmit(values) {\n        console.log(\"Here\")\n        if(this.state.id === '-1') {\n            console.log(\"Create\")\n            SkillDataService.createSkill({\n                skillCode:values.skillCode,\n                skillName:values.skillName\n            }).then(() => this.props.history.push('/skills'))\n        } else {\n            console.log(\"Update\")\n            SkillDataService.updateSkill(this.state.id, {\n                skillCode:values.skillCode,\n                skillName:values.skillName\n            }).then(() => this.props.history.push('/skills'))\n        }\n    }\n\n    render() {\n        let {skillCode, skillName} = this.state\n\n        return (\n            <div>\n                <HeaderComponent/>\n                <h4>New Skill Form</h4>\n                <hr/>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-3\">\n                        </div>\n                        <div className=\"col-md-6\">\n                            <Formik \n                                initialValues={{skillCode, skillName}}\n                                onSubmit={this.onSubmit}\n                                validateOnChange={false}\n                                validateOnBlur={false}\n                                validate={this.validate}\n                                enableReinitialize={true}\n                            >\n                                {\n                                    (props) => (\n                                        <Form>\n                                            <ErrorMessage name=\"skillCode\" component=\"div\" className=\"alert alert-warning\"/>                                            \n                                            <ErrorMessage name=\"skillName\" component=\"div\" className=\"alert alert-warning\"/>\n                                            <fieldset className=\"form-group\">\n                                                <label>Skill Code</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"skillCode\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Skill Name</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"skillName\"/>\n                                            </fieldset>\n                                            <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                        </Form>\n                                    )                        \n                                }\n                            </Formik>\n                        </div>\n                        <div className=\"col-md-3\">\n                        </div>\n                    </div>                    \n                </div>\n                <FooterComponentList/>\n            </div>\n        )\n    }\n}\n\nexport default SkillComponent","import axios from 'axios';\n\nconst HOST_API = 'https://workforce-app.herokuapp.com';\nconst SERVICE_API = `${HOST_API}/roles`;\n\nclass RoleDataService {\n    retrieveAllRoles(name) {\n        return axios.get(`${SERVICE_API}/list`);\n    }\n    deleteRole(id) {\n        return axios.delete(`${SERVICE_API}/${id}`);\n    }\n    retrieveRole(id) {\n        return axios.get(`${SERVICE_API}/${id}`);\n    }\n    updateRole(id, todo) {\n        return axios.put(`${SERVICE_API}/${id}`, todo);\n    }\n    createRole(todo) {\n        return axios.post(`${SERVICE_API}`, todo);\n    }\n}\n\nexport default new RoleDataService();","import React, {Component} from 'react';\nimport Table from 'react-bootstrap/Table';\nimport RoleDataService from '../services/RoleDataService.js';\nimport FooterComponentList from './FooterComponentList.jsx';\nimport HeaderComponent from '../views/HeaderComponent.jsx';\n\nclass ListRoleComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            roles: [],\n            message:\"\"\n        }\n        this.refreshRoles = this.refreshRoles.bind(this);\n        this.deleteRoleClicked = this.deleteRoleClicked.bind(this);\n        this.updateRoleClicked = this.updateRoleClicked.bind(this);\n        this.addRoleClicked = this.addRoleClicked.bind(this);\n    }\n\n    componentDidMount() {\n        this.refreshRoles();\n    }\n\n    refreshRoles() {\n        RoleDataService.retrieveAllRoles(\"name\")\n            .then(\n                response => {\n                    this.setState({roles: response.data})\n                }\n            )\n    }\n\n    deleteRoleClicked(id, name) {\n        RoleDataService.deleteRole(id)\n            .then(\n                response => {\n                    this.setState({message: `Delete of role ${name} Successful`})\n                    this.refreshRoles()\n                }\n            )\n    }\n\n    updateRoleClicked(id) {\n        console.log(\"Update: \" + id)\n        this.props.history.push(`/role/${id}`)\n    }\n\n    addRoleClicked() {\n        this.props.history.push('/role/-1')\n    }\n\n    render() {\n        return(\n            <div>\n                <HeaderComponent/>\n                <h3>List Role</h3>\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <Table bordered striped hover size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>Role Code</th>\n                                <th>Role Name</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.roles.map (\n                                    role => \n                                    <tr key={role.roleCode}>\n                                        <td>{role.roleCode}</td>\n                                        <td>{role.roleName}</td>\n                                        <td><button className=\"btn btn-sm btn-info\" onClick={() => this.updateRoleClicked(role.roleCode)}>Update</button></td>\n                                        <td><button className=\"btn btn-sm btn-danger\" onClick={() => this.deleteRoleClicked(role.roleCode, role.roleName)}>Delete</button></td>\n                                    </tr>\n                                )\n                            }                        \n                        </tbody>\n                    </Table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-info\" onClick={() => this.addRoleClicked()}>Add</button>\n                    </div>\n                </div>\n                <FooterComponentList/>\n            </div>\n        )\n    }\n}\n\nexport default ListRoleComponent","import React, {Component} from 'react';\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\nimport RoleDataService from '../services/RoleDataService.js';\nimport FooterComponentList from './FooterComponentList.jsx';\nimport HeaderComponent from '../views/HeaderComponent.jsx';\n\nclass RoleComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.match.params.id,\n            roleCode: '',\n            roleName: ''        }\n        this.onSubmit = this.onSubmit.bind(this);\n        this.validate = this.validate.bind(this);\n    }\n\n    componentDidMount() {\n\n        if(this.state.id === -1) {\n            return\n        }\n\n        RoleDataService.retrieveRole(this.state.id)\n        .then(response => this.setState({\n            roleCode:response.data.roleCode,\n            roleName:response.data.roleName\n        }))\n    }\n\n    validate(values) {\n        let errors = {}\n        \n        if(!values.roleCode) {\n            errors.roleCode = 'Enter a role code'           \n        } else if(values.roleCode.length < 1) {\n            errors.roleCode = 'Enter at least 1 characters for role code'\n        }\n\n        if(!values.roleName) {\n            errors.roleName = 'Enter a role name'           \n        } else if(values.roleName.length < 4) {\n            errors.roleName = 'Enter at least 4 characters for role name'\n        }\n\n        return errors;\n    }\n\n    onSubmit(values) {\n        console.log(\"Here\")\n        if(this.state.id === '-1') {\n            console.log(\"Create\")\n            RoleDataService.createRole({\n                roleCode:values.roleCode,\n                roleName:values.roleName\n            }).then(() => this.props.history.push('/roles'))\n        } else {\n            console.log(\"Update\")\n            RoleDataService.updateRole(this.state.id, {\n                roleCode:values.roleCode,\n                roleName:values.roleName\n            }).then(() => this.props.history.push('/roles'))\n        }\n    }\n\n    render() {\n        let {roleCode, roleName} = this.state\n\n        return (\n            <div>\n                <HeaderComponent/>\n                <h4>New Role Form</h4>\n                <hr/>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-3\">\n                        </div>\n                        <div className=\"col-md-6\">\n                            <Formik \n                                initialValues={{roleCode, roleName}}\n                                onSubmit={this.onSubmit}\n                                validateOnChange={false}\n                                validateOnBlur={false}\n                                validate={this.validate}\n                                enableReinitialize={true}\n                            >\n                                {\n                                    (props) => (\n                                        <Form>\n                                            <ErrorMessage name=\"roleCode\" component=\"div\" className=\"alert alert-warning\"/>                                            \n                                            <ErrorMessage name=\"roleName\" component=\"div\" className=\"alert alert-warning\"/>\n                                            <fieldset className=\"form-group\">\n                                                <label>Role Code</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"roleCode\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Role Name</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"roleName\"/>\n                                            </fieldset>\n                                            <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                        </Form>\n                                    )                        \n                                }\n                            </Formik>\n                        </div>\n                        <div className=\"col-md-3\">\n                        </div>\n                    </div>                    \n                </div>\n                <FooterComponentList/>\n            </div>\n        )\n    }\n}\n\nexport default RoleComponent","import axios from 'axios';\n\nconst HOST_API = 'https://workforce-app.herokuapp.com';\nconst SERVICE_API = `${HOST_API}/employeeSkills`;\n\nclass EmployeeDataService {\n    retrieveAllEmployeeSkills(name) {\n        return axios.get(`${SERVICE_API}/list`,);\n    }\n    deleteEmployeeSkill(id) {\n        return axios.delete(`${SERVICE_API}/${id}`);\n    }\n    retrieveEmployeeSkill(id) {\n        return axios.get(`${SERVICE_API}/${id}`);\n    }\n    updateEmployeeSkill(id, todo) {\n        return axios.put(`${SERVICE_API}/${id}`, todo);\n    }\n    createEmployeeSkill(todo) {\n        return axios.post(`${SERVICE_API}`, todo);\n    }\n}\n\nexport default new EmployeeDataService();","import React, {Component} from 'react';\nimport Table from 'react-bootstrap/Table';\nimport EmployeeSkillService from '../services/EmployeeSkillService.js';\nimport FooterComponentList from './FooterComponentList.jsx';\nimport HeaderComponent from '../views/HeaderComponent.jsx';\n\nclass ListEmployeeComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            employeeSkills: [],\n            message:\"\"\n        }\n        this.refreshEmployeeSkills = this.refreshEmployeeSkills.bind(this);\n        this.deleteEmployeeSkillClicked = this.deleteEmployeeSkillClicked.bind(this);\n        this.updateEmployeeSkillClicked = this.updateEmployeeSkillClicked.bind(this);\n        this.addEmployeeSkillClicked = this.addEmployeeSkillClicked.bind(this);\n    }\n\n    componentDidMount() {\n        this.refreshEmployeeSkills();\n    }\n\n    refreshEmployeeSkills() {\n        EmployeeSkillService.retrieveAllEmployeeSkills(\"name\")\n            .then(\n                response => {\n                    this.setState({employeeSkills: response.data})\n                }\n            )\n    }\n\n    deleteEmployeeSkillClicked(id, name) {\n        EmployeeSkillService.deleteEmployeeSkill(id)\n            .then(\n                response => {\n                    this.setState({message: `Delete of employee skill ${name} Successful`})\n                    this.refreshEmployeeSkills()\n                }\n            )\n    }\n\n    updateEmployeeSkillClicked(id) {\n        this.props.history.push(`/employeeSkill/${id}`)\n    }\n\n    addEmployeeSkillClicked() {\n        this.props.history.push('/employeeSkill/-1')\n    }\n\n    render() {\n        return(\n            <div>\n                <HeaderComponent/>\n                <h3>List Employee Skill</h3>\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <Table bordered striped hover size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>Employee Name</th>\n                                <th>Skill</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.employeeSkills.map (\n                                    employeeSkill => \n                                    <tr key={employeeSkill.id}>\n                                        <td>{employeeSkill.employeeId}</td>\n                                        <td>{employeeSkill.skillCode}</td>\n                                        <td><button className=\"btn btn-sm btn-info\" onClick={() => this.updateEmployeeSkillClicked(employeeSkill.id)}>Update</button></td>\n                                        <td><button className=\"btn btn-sm btn-danger\" onClick={() => this.deleteEmployeeSkillClicked(employeeSkill.id, employeeSkill.id)}>Delete</button></td>\n                                    </tr>\n                                )\n                            }                        \n                        </tbody>\n                    </Table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-info\" onClick={() => this.addEmployeeSkillClicked()}>Add</button>\n                    </div>\n                </div>\n                <FooterComponentList/>\n            </div>\n        )\n    }\n}\n\nexport default ListEmployeeComponent","import React, {Component} from 'react';\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\nimport EmployeeSkillService from '../services/EmployeeSkillService.js';\nimport FooterComponentList from './FooterComponentList.jsx';\nimport HeaderComponent from '../views/HeaderComponent.jsx';\n\nclass EmployeeSkillComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.match.params.id,\n            employeeId: '',\n            skillCode: ''        }\n        this.onSubmit = this.onSubmit.bind(this);\n        this.validate = this.validate.bind(this);\n    }\n\n    componentDidMount() {\n\n        if(this.state.id === -1) {\n            return\n        }\n\n        EmployeeSkillService.retrieveEmployeeSkill(this.state.id)\n        .then(response => this.setState({\n            employeeId:response.data.employeeId,\n            skillCode:response.data.skillCode\n        }))\n    }\n\n    validate(values) {\n        let errors = {}\n        \n        if(!values.employeeId) {\n            errors.employeeId = 'Enter an employee ID'           \n        } else if(values.employeeId.length < 1) {\n            errors.employeeId = 'Enter at least 1 characters for employee ID'\n        }\n\n        if(!values.skillCode) {\n            errors.skiilCode = 'Enter a skill code'           \n        } else if(values.skillCode.length < 1) {\n            errors.skillCode = 'Enter at least 1 characters for skill code'\n        }\n\n        return errors;\n    }\n\n    onSubmit(values) {\n        console.log(\"Here\")\n        if(this.state.id === '-1') {\n            console.log(\"Create\")\n            EmployeeSkillService.createEmployeeSkill({\n                employeeId:values.employeeId,\n                skillCode:values.skillCode\n            }).then(() => this.props.history.push('/employeeSkills'))\n        } else {\n            console.log(\"Update\")\n            EmployeeSkillService.updateEmployeeSkill(this.state.id, {\n                employeeId:values.employeeId,\n                skillCode:values.skillCode\n            }).then(() => this.props.history.push('/employeeSkills'))\n        }\n    }\n\n    render() {\n        let {employeeId, skillCode} = this.state\n\n        return (\n            <div>\n                <HeaderComponent/>\n                <h4>New Employee Skill Form</h4>\n                <hr/>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-3\">\n                        </div>\n                        <div className=\"col-md-6\">\n                            <Formik \n                                initialValues={{employeeId, skillCode}}\n                                onSubmit={this.onSubmit}\n                                validateOnChange={false}\n                                validateOnBlur={false}\n                                validate={this.validate}\n                                enableReinitialize={true}\n                            >\n                                {\n                                    (props) => (\n                                        <Form>\n                                            <ErrorMessage name=\"employeeId\" component=\"div\" className=\"alert alert-warning\"/>                                            \n                                            <ErrorMessage name=\"skillCode\" component=\"div\" className=\"alert alert-warning\"/>\n                                            <fieldset className=\"form-group\">\n                                                <label>Employee ID</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"employeeId\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Skill Code</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"skillCode\"/>\n                                            </fieldset>\n                                            <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                        </Form>\n                                    )                        \n                                }\n                            </Formik>\n                        </div>\n                        <div className=\"col-md-3\">\n                        </div>\n                    </div>                    \n                </div>\n                <FooterComponentList/>\n            </div>\n        )\n    }\n}\n\nexport default EmployeeSkillComponent","import React, { Component } from \"react\";\nimport Timeline from 'react-calendar-timeline';\nimport 'react-calendar-timeline/lib/Timeline.css';\nimport moment from 'moment'\nimport FooterComponent from './FooterComponent.jsx';\nimport HeaderComponent from '../views/HeaderComponent.jsx';\nimport AuthenticationService from '../services/AuthenticationService.js';\nimport EmployeeDataService from '../services/EmployeeDataService.js';\nimport OptimizerService from '../services/OptimizerService.js';\nimport Table from 'react-bootstrap/Table';\n\nclass OptimizerComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            apigroup: [],\n            apijob: [],\n            jobs:[],\n            jobCount: [],\n        }\n        this.optimizerClicked = this.optimizerClicked.bind(this);\n        this.refreshActiveEmployees = this.refreshActiveEmployees.bind(this);\n        this.refreshActiveJobs = this.refreshActiveJobs.bind(this);\n        this.refreshJobCount = this.refreshJobCount.bind(this);\n    }\n\n    componentDidMount() {\n        this.refreshActiveEmployees();\n        this.refreshActiveJobs(); \n        this.refreshJobCount();       \n    }\n\n    refreshActiveEmployees() {\n        EmployeeDataService.retrieveAllActiveEmployees()\n        .then(\n            response => {\n                this.setState({apigroup: response.data})\n            }\n        )\n    }\n\n    refreshActiveJobs() {\n        OptimizerService.getOptimizer()\n        .then(\n            response => {\n                this.setState({jobs:response.data})\n            }\n        )\n    }\n\n    refreshJobCount() {\n        OptimizerService.getJobCount()\n        .then(\n            response => {\n                this.setState({jobCount:response.data})\n            }\n        )\n    }\n\n    optimizerClicked() {\n        this.state.jobs.map (\n            job => {\n                const item = {\n                    id: job.id,\n                    group: job.group,\n                    title: job.title,\n                    start_time: moment(job.startTime, \"YYYY-MM-DD HH:mm\"),\n                    end_time: moment(job.endTime, \"YYYY-MM-DD HH:mm\")\n                }\n                this.setState(previousState => ({\n                    apijob: [...previousState.apijob, item]\n                }))\n            }\n        )\n        console.log(\"Finish!\");\n    }\n\n    render() {\n        const isAdminLoggedIn = AuthenticationService.isAdminLoggedIn();\n\n        return (\n            <div>\n                <HeaderComponent/>\n                <div className=\"container\">\n                    <h3>Employee Scheduling</h3>\n                    <Timeline\n                        groups={this.state.apigroup}\n                        items={this.state.apijob}\n                        defaultTimeStart={moment().add(-12, 'hour')}\n                        defaultTimeEnd={moment().add(12, 'hour')}\n                    />\n                    <br/>\n                    {isAdminLoggedIn && <button className=\"btn btn-md btn-success\" onClick={this.optimizerClicked}>\n                        Optimize\n                    </button>}\n                    <Table bordered striped hover size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>Employee Name</th>\n                                <th>Total Assignment</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.jobCount.map (\n                                    jobCount => \n                                    <tr key={jobCount.employeeName}>\n                                        <td>{jobCount.employeeName}</td>\n                                        <td>{jobCount.jobCount}</td>\n                                    </tr>\n                                )\n                            }                        \n                        </tbody>\n                    </Table>                      \n                </div>\n                <FooterComponent/>\n            </div>\n        )\n    }\n}\n\nexport default OptimizerComponent","import React, {Component} from 'react';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\nimport AuthenticatedRoute from '../services/AuthenticatedRoute.jsx';\nimport LoginComponent from '../views/LoginComponent.jsx';\nimport WelcomeComponent from '../views/WelcomeComponent.jsx';\nimport ErrorComponent from '../views/ErrorComponent.jsx';\nimport LogoutComponent from '../views/LogoutComponent.jsx';\nimport ListEmployeeComponent from '../views/ListEmployeeComponent.jsx';\nimport EmployeeComponent from '../views/EmployeeComponent.jsx';\nimport ListJobComponent from '../views/ListJobComponent.jsx';\nimport JobComponent from '../views/JobComponent.jsx';\nimport ListShiftComponent from '../views/ListShiftComponent.jsx';\nimport ShiftComponent from '../views/ShiftComponent.jsx';\nimport ListSkillComponent from '../views/ListSkillComponent.jsx';\nimport SkillComponent from '../views/SkillComponent.jsx';\nimport ListRoleComponent from '../views/ListRoleComponent.jsx';\nimport RoleComponent from '../views/RoleComponent.jsx';\nimport ListEmployeeSkillComponent from '../views/ListEmployeeSkillComponent.jsx';\nimport EmployeeSkillComponent from '../views/EmployeeSkillComponent.jsx';\nimport OptimizerComponent from '../views/OptimizerComponent.jsx';\n\nclass WorkforceApp extends Component {\n    render() {\n        return(\n            <div className=\"TodoApp\">\n                <HashRouter basename=\"/\">\n                    <>\n                        <Switch>\n                            <Route path=\"/\" exact component={LoginComponent}/>\n                            <Route path=\"/login\" component={LoginComponent}/>\n                            <AuthenticatedRoute path=\"/welcome/:name\" component={WelcomeComponent}/>\n                            <AuthenticatedRoute path=\"/employees\" component={ListEmployeeComponent}/>\n                            <AuthenticatedRoute path=\"/employee/:id\" component={EmployeeComponent}/>\n                            <AuthenticatedRoute path=\"/employeeSkills\" component={ListEmployeeSkillComponent}/>\n                            <AuthenticatedRoute path=\"/employeeSkill/:id\" component={EmployeeSkillComponent}/>\n                            <AuthenticatedRoute path=\"/jobs\" component={ListJobComponent}/>\n                            <AuthenticatedRoute path=\"/job/:id\" component={JobComponent}/>\n                            <AuthenticatedRoute path=\"/roles\" component={ListRoleComponent}/>\n                            <AuthenticatedRoute path=\"/role/:id\" component={RoleComponent}/>\n                            <AuthenticatedRoute path=\"/shifts\" component={ListShiftComponent}/>\n                            <AuthenticatedRoute path=\"/shift/:id\" component={ShiftComponent}/>\n                            <AuthenticatedRoute path=\"/skills\" component={ListSkillComponent}/>\n                            <AuthenticatedRoute path=\"/skill/:id\" component={SkillComponent}/>\n                            <AuthenticatedRoute path=\"/optimizer\" component={OptimizerComponent}/>\n                            <AuthenticatedRoute path=\"/logout\" component={LogoutComponent}/>\n                            <Route path=\"\" component={ErrorComponent}/>\n                        </Switch>                        \n                    </>\n                </HashRouter>\n            </div>\n        );\n    }\n}\n\nexport default WorkforceApp;","import React from 'react';\nimport WorkforceApp from '../src/components/views/WorkforceApp.jsx';\nimport './App.css';\nimport './bootstrap.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WorkforceApp/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
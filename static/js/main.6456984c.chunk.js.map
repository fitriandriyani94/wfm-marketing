{"version":3,"sources":["components/services/AuthenticationService.js","components/services/AuthenticatedRoute.jsx","components/services/LoginService.js","components/views/FooterComponentList.jsx","components/views/LoginComponent.jsx","components/views/HeaderComponent.jsx","components/views/WelcomeComponent.jsx","components/views/ErrorComponent.jsx","components/views/LogoutComponent.jsx","components/services/EmployeeDataService.js","components/views/ListEmployeeComponent.jsx","components/views/FooterComponent.jsx","components/views/EmployeeComponent.jsx","components/services/JobDataService.js","components/views/ListJobComponent.jsx","components/views/JobComponent.jsx","components/services/ShiftDataService.js","components/views/ListShiftComponent.jsx","components/views/ShiftComponent.jsx","components/services/SkillDataService.js","components/views/ListSkillComponent.jsx","components/views/SkillComponent.jsx","components/services/RoleDataService.js","components/views/ListRoleComponent.jsx","components/views/RoleComponent.jsx","components/views/OptimizerComponent.jsx","components/views/WorkforceApp.jsx","App.js","serviceWorker.js","index.js"],"names":["username","password","sessionStorage","setItem","removeItem","getItem","user","AuthenticatedRoute","AuthenticationService","isUserLoggedIn","this","props","to","Component","SERVICE_API","loginData","axios","post","FooterComponentList","className","LoginComponent","state","email","hasLoginFailed","showSuccessMessage","handleChange","bind","loginClicked","event","setState","target","name","value","LoginService","getLogin","then","resp","console","log","data","registerSuccessfulLogin","history","push","catch","htmlFor","type","id","onChange","onClick","HeaderComponent","getUserLoggedIn","getLoggedInUserName","href","logout","WelcomeComponent","match","params","variant","ErrorComponent","LogoutComponent","get","delete","todo","put","ListEmployeeComponent","employees","message","refreshEmployees","deleteEmployeeClicked","updateEmployeeClicked","addEmployeeClicked","EmployeeDataService","retrieveAllEmployees","response","deleteEmployee","bordered","striped","hover","size","map","employee","key","employeeId","address","joinDate","employeeStatus","FooterComponent","EmployeeComponent","birthPlace","birthDate","gender","phoneNumber","resignationDate","onSubmit","validate","retrieveEmployee","moment","format","values","errors","length","nip","createEmployee","updateEmployee","initialValues","validateOnChange","validateOnBlur","enableReinitialize","component","ListJobComponent","jobs","refreshJobs","deleteJobClicked","updateJobClicked","addJobClicked","JobDataService","retrieveAllJobs","deleteJob","job","jobCode","jobName","shiftCode","activityDate","activityName","startTime","endTime","JobComponent","instance","classCount","retrieveJob","createJob","updateJob","ListShiftComponent","shifts","refreshShifts","deleteShiftClicked","updateShiftClicked","addShiftClicked","ShiftDataService","retrieveAllShifts","deleteShift","shift","shiftName","ShiftComponent","retrieveShift","createShift","updateShift","ListSkillComponent","skills","refreshSkills","deleteSkillClicked","updateSkillClicked","addSkillClicked","SkillDataService","retrieveAllSkills","deleteSkill","skill","skillCode","skillName","SkillComponent","retrieveSkill","createSkill","updateSkill","ListRoleComponent","roles","refreshRoles","deleteRoleClicked","updateRoleClicked","addRoleClicked","RoleDataService","retrieveAllRoles","deleteRole","role","roleCode","roleName","RoleComponent","retrieveRole","createRole","updateRole","OptimizerComponent","items","group","title","start_time","end_time","add","groups","defaultTimeStart","defaultTimeEnd","WorkforceApp","basename","path","exact","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6456984c.chunk.js","sourcesContent":["class AuthenticationService {\n    registerSuccessfulLogin(username, password) {\n        sessionStorage.setItem('authenticatedUser', username);\n    }\n\n    logout() {\n        sessionStorage.removeItem('authenticatedUser');\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem('authenticatedUser')\n        if(user === null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem('authenticatedUser')\n        if(user === null) {\n            return ''\n        } else {\n            return user\n        }\n    }\n}\n\nexport default new AuthenticationService()","import React, {Component} from 'react';\nimport AuthenticationService from '../services/AuthenticationService.js';\nimport {Route, Redirect} from 'react-router-dom';\n\nclass AuthenticatedRoute extends Component {\n    render() {\n        if(AuthenticationService.isUserLoggedIn()) {\n            return <Route {...this.props}/>\n        } else {\n            return <Redirect to=\"/login\"/>\n        }\n    }\n}\n\nexport default AuthenticatedRoute","import axios from 'axios';\n\nconst HOST_API = 'https://workforce-app.herokuapp.com/';\nconst SERVICE_API = `${HOST_API}`;\n\nclass LoginService {\n    getLogin(loginData) {\n        return axios.post(`${SERVICE_API}/login`, loginData);\n    }\n}\n\nexport default new LoginService();","import React, {Component} from 'react';\n\nclass FooterComponentList extends Component {\n    render() {\n        return(\n            <footer className=\"footer-list\">\n                <span className=\"text-muted\">All Right Reserved 2019 @Workforce Management Team</span>\n            </footer>\n        )\n    }\n}\n\nexport default FooterComponentList","import React, {Component} from 'react';\nimport AuthenticationService from '../services/AuthenticationService.js';\nimport LoginService from '../services/LoginService.js';\nimport './LoginComponent.css';\nimport FooterComponentList from '../views/FooterComponentList.jsx';\n\nclass LoginComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            email: '',\n            password: '',\n            hasLoginFailed: false,\n            showSuccessMessage: false\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.loginClicked = this.loginClicked.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({[event.target.name]:event.target.value})\n    }\n\n    loginClicked() {\n        LoginService.getLogin({\n            email:this.state.email,\n            password:this.state.password\n        })\n        .then((resp) => {\n            console.log(\"Success Login: \" + resp.data)\n            if(resp.data) {\n                AuthenticationService.registerSuccessfulLogin(this.state.email, this.state.password);\n                this.props.history.push(`welcome/${this.state.email}`)\n            } else {\n                if(this.state.email === \"fitri.andriyani\" && this.state.password === \"keepsecret\") {\n                    console.log(\"Success Login Admin\")\n                    AuthenticationService.registerSuccessfulLogin(this.state.email, this.state.password);\n                    this.props.history.push(`welcome/${this.state.email}`)\n                } else {\n                    console.log(\"Failed Login\")\n                    this.setState({showSuccessMessage:false})\n                    this.setState({hasLoginFailed:true})\n                }                \n            }            \n        })\n        .catch(() => {\n            if(this.state.email === \"fitri.andriyani\" && this.state.password === \"keepsecret\") {\n                console.log(\"Success Login Admin\")\n                AuthenticationService.registerSuccessfulLogin(this.state.email, this.state.password);\n                this.props.history.push(`welcome/${this.state.email}`)\n            } else {\n                console.log(\"Failed Login\")\n                this.setState({showSuccessMessage:false})\n                this.setState({hasLoginFailed:true})\n            }\n        })\n    }\n\n    render() {\n        return(\n            <div className=\"row\">\n                <div className=\"col-md-4\">\n                </div>\n                <div className=\"col-md-4\">\n                    {this.state.hasLoginFailed && <div className=\"alert alert-primary\">Invalid Credentials</div>}\n                    <div className=\"container-gray\">\n                        <div className=\"col login-sec\">\n                            <h2 className=\"text-center\">Sign In</h2>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"usr\">Email:</label>\n                                    <input type=\"text\" id=\"usr\" className=\"form-control\" name=\"email\" value={this.state.email} onChange={this.handleChange} />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"pwd\">Password:</label>\n                                    <input type=\"password\" id=\"pwd\" className=\"form-control\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\n                                    <br/>\n                                    <button className=\"btn btn-primary\" onClick={this.loginClicked}>\n                                        Submit\n                                    </button>\n                                </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-md-4\">\n                </div>\n                <FooterComponentList/>\n            </div>\n        )\n    }\n}\n\nexport default LoginComponent","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport AuthenticationService from '../services/AuthenticationService.js';\n\nclass HeaderComponent extends Component {\n    render() {\n        const isUserLoggedIn = AuthenticationService.isUserLoggedIn();\n        const getUserLoggedIn = AuthenticationService.getLoggedInUserName();\n\n        return(\n            <header>\n                <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n                    <div><a href=\"https://raharja.ac.id/\" className=\"navbar-brand\">Workforce Management</a></div>\n                    <ul className=\"navbar-nav\"> \n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to={\"/welcome/\" + getUserLoggedIn}>Home</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/employees\">Employee</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/roles\">Role</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/jobs\">Job</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/shifts\">Shift</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/skills\">Skill</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/optimizer\">Optimizer</Link></li>}\n                    </ul>\n                    <ul className=\"navbar-nav navbar-collapse justify-content-end\">\n                        {!isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/login\">Login</Link></li>}\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/logout\" onClick={AuthenticationService.logout}>Logout</Link></li>}\n                    </ul>\n                </nav>\n            </header>\n        )\n    }\n}\n\nexport default HeaderComponent","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Button from 'react-bootstrap/Button';\nimport FooterComponentList from '../views/FooterComponentList.jsx';\n\nclass WelcomeComponent extends Component {\n    render() {\n        return(\n            <>\n                <Jumbotron>\n                    {<h1>Welcome {this.props.match.params.name}</h1>}\n                    <p>\n                        This is a workforce management application, You can manage your employees <Link to=\"/employees\">here</Link>.\n                    </p>\n                    <p>\n                        You can manage job for your employees <Link to=\"/jobs\">here</Link>.\n                    </p>\n                    <p>\n                        <Button variant=\"primary\">Learn more</Button>\n                    </p>\n                </Jumbotron>\n                <FooterComponentList/>\n            </>\n        )\n    }\n}\n\nexport default WelcomeComponent","import React from 'react';\n\nfunction ErrorComponent() {\n    return <div>An errror occured!</div>\n}\n\nexport default ErrorComponent","import React, {Component} from 'react';\n\nclass LogoutComponent extends Component {\n    render() {\n        return(\n            <>\n                <h1>You are logged out</h1>\n                <div className=\"container\">\n                    Thank Your for Using Our Application\n                </div>\n            </>\n        )\n    }\n}\n\nexport default LogoutComponent","import axios from 'axios';\n\nconst HOST_API = 'https://workforce-app.herokuapp.com/';\nconst SERVICE_API = `${HOST_API}/employees`;\n\nclass EmployeeDataService {\n    retrieveAllEmployees(name) {\n        return axios.get(`${SERVICE_API}/list`,);\n    }\n    deleteEmployee(id) {\n        return axios.delete(`${SERVICE_API}/${id}`);\n    }\n    retrieveEmployee(id) {\n        return axios.get(`${SERVICE_API}/${id}`);\n    }\n    updateEmployee(id, todo) {\n        return axios.put(`${SERVICE_API}/${id}`, todo);\n    }\n    createEmployee(todo) {\n        return axios.post(`${SERVICE_API}`, todo);\n    }\n}\n\nexport default new EmployeeDataService();","import React, {Component} from 'react';\nimport Table from 'react-bootstrap/Table';\nimport EmployeeDataService from '../services/EmployeeDataService.js';\nimport FooterComponentList from './FooterComponentList.jsx';\n\nclass ListEmployeeComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            employees: [],\n            message:\"\"\n        }\n        this.refreshEmployees = this.refreshEmployees.bind(this);\n        this.deleteEmployeeClicked = this.deleteEmployeeClicked.bind(this);\n        this.updateEmployeeClicked = this.updateEmployeeClicked.bind(this);\n        this.addEmployeeClicked = this.addEmployeeClicked.bind(this);\n    }\n\n    componentDidMount() {\n        this.refreshEmployees();\n    }\n\n    refreshEmployees() {\n        EmployeeDataService.retrieveAllEmployees(\"name\")\n            .then(\n                response => {\n                    this.setState({employees: response.data})\n                }\n            )\n    }\n\n    deleteEmployeeClicked(id, name) {\n        EmployeeDataService.deleteEmployee(id)\n            .then(\n                response => {\n                    this.setState({message: `Delete of employee ${name} Successful`})\n                    this.refreshEmployees()\n                }\n            )\n    }\n\n    updateEmployeeClicked(id) {\n        console.log(\"Update: \" + id)\n        this.props.history.push(`/employee/${id}`)\n    }\n\n    addEmployeeClicked() {\n        this.props.history.push('/employee/-1')\n    }\n\n    render() {\n        return(\n            <div>\n                <h3>List Employee</h3>\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <Table bordered striped hover size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>Employee ID</th>\n                                <th>Name</th>\n                                <th>Username</th>\n                                <th>Address</th>\n                                <th>Email</th>\n                                <th>Join Date</th>\n                                <th>Status</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.employees.map (\n                                    employee => \n                                    <tr key={employee.employeeId}>\n                                        <td>{employee.employeeId}</td>\n                                        <td>{employee.name}</td>\n                                        <td>{employee.username}</td>\n                                        <td>{employee.address}</td>\n                                        <td>{employee.email}</td>\n                                        <td>{employee.joinDate}</td>\n                                        <td>{employee.employeeStatus}</td>\n                                        <td><button className=\"btn btn-sm btn-info\" onClick={() => this.updateEmployeeClicked(employee.employeeId)}>Update</button></td>\n                                        <td><button className=\"btn btn-sm btn-danger\" onClick={() => this.deleteEmployeeClicked(employee.employeeId, employee.name)}>Delete</button></td>\n                                    </tr>\n                                )\n                            }                        \n                        </tbody>\n                    </Table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-info\" onClick={() => this.addEmployeeClicked()}>Add</button>\n                    </div>\n                </div>\n                <FooterComponentList/>\n            </div>\n        )\n    }\n}\n\nexport default ListEmployeeComponent","import React, {Component} from 'react';\n\nclass FooterComponent extends Component {\n    render() {\n        return(\n            <footer className=\"footer\">\n                <span className=\"text-muted\">All Right Reserved 2019 @Workforce Management Team</span>\n            </footer>\n        )\n    }\n}\n\nexport default FooterComponent","import React, {Component} from 'react';\nimport moment from 'moment';\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\nimport EmployeeDataService from '../services/EmployeeDataService.js';\nimport FooterComponent from './FooterComponent.jsx';\n\nclass EmployeeComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.match.params.id,\n            employeeId: '',\n            name: '',\n            username: '',\n            password: '',\n            birthPlace: '',\n            birthDate: '',\n            address: '',\n            gender: '',\n            phoneNumber: '',\n            email: '',\n            joinDate: '',\n            resignationDate: '',\n            employeeStatus: ''\n        }\n        this.onSubmit = this.onSubmit.bind(this);\n        this.validate = this.validate.bind(this);\n    }\n\n    componentDidMount() {\n\n        if(this.state.id === -1) {\n            return\n        }\n\n        EmployeeDataService.retrieveEmployee(this.state.id)\n        .then(response => this.setState({\n            employeeId:response.data.employeeId,\n            name:response.data.name,\n            username:response.data.username,\n            password:response.data.password,\n            birthPlace:response.data.birthPlace,\n            birthDate:moment(response.data.birthDate).format('YYYY-MM-DD'),\n            address:response.data.address,\n            gender:response.data.gender,\n            phoneNumber:response.data.phoneNumber,\n            email:response.data.email,\n            joinDate:moment(response.data.joinDate).format('YYYY-MM-DD'),\n            resignationDate:moment(response.data.resignationDate).format('YYYY-MM-DD'),\n            employeeStatus:response.data.employeeStatus\n        }))\n    }\n\n    validate(values) {\n        let errors = {}\n        \n        if(!values.name) {\n            errors.name = 'Enter an employee name'           \n        } else if(values.name.length < 4) {\n            errors.name = 'Enter at least 4 characters for employee name'\n        }\n\n        if(!values.username) {\n            errors.nip = 'Enter a NIP'           \n        } else if(values.nip.length < 4) {\n            errors.nip = 'Enter at least 4 characters for employee username'\n        }\n\n        return errors;\n    }\n\n    onSubmit(values) {\n\n        if(this.state.id === '-1') {\n            console.log(\"Create\")\n            EmployeeDataService.createEmployee({\n                employeeId:values.employeeId,\n                name:values.name,\n                username:values.username,\n                password:values.password,\n                birthPlace:values.birthPlace,\n                birthDate:values.birthDate,\n                address:values.address,\n                gender:values.gender,\n                phoneNumber:values.phoneNumber,\n                email:values.email,\n                joinDate:values.joinDate,\n                resignationDate:'',\n                employeeStatus:values.employeeStatus\n            }).then(() => this.props.history.push('/employees'))\n        } else {\n            console.log(\"Update\")\n            EmployeeDataService.updateEmployee(this.state.id, {\n                employeeId:values.employeeId,\n                name:values.name,\n                username:values.username,\n                password:values.password,\n                birthPlace:values.birthPlace,\n                birthDate:values.birthDate,\n                address:values.address,\n                gender:values.gender,\n                phoneNumber:values.phoneNumber,\n                email:values.email,\n                joinDate:values.joinDate,\n                resignationDate:'',\n                employeeStatus:values.employeeStatus\n            }).then(() => this.props.history.push('/employees'))\n        }\n    }\n\n    render() {\n        let {employeeId, name, username, password, birthPlace, birthDate, address, gender, phoneNumber, email, joinDate, resignationDate, employeeStatus} = this.state\n\n        return (\n            <div>\n                <h1>Employee</h1>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-1\">\n                        </div>\n                        <div className=\"col-md-10\">\n                            <Formik \n                                initialValues={{employeeId, name, username, password, birthPlace, birthDate, address, gender, phoneNumber, email, joinDate, resignationDate, employeeStatus}}\n                                onSubmit={this.onSubmit}\n                                validateOnChange={false}\n                                validateOnBlur={false}\n                                validate={this.validate}\n                                enableReinitialize={true}\n                            >\n                                {\n                                    (props) => (\n                                        <Form>\n                                            <ErrorMessage name=\"name\" component=\"div\" className=\"alert alert-warning\"/>                                            \n                                            <ErrorMessage name=\"username\" component=\"div\" className=\"alert alert-warning\"/>\n                                            <fieldset className=\"form-group\">\n                                                <label>Employee ID</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"employeeId\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Name</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"name\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Username</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"username\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Password</label>\n                                                <Field className=\"form-control\" type=\"password\" name=\"password\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Birth Place</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"birthPlace\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Birth Date</label>\n                                                <Field className=\"form-control\" type=\"date\" name=\"birthDate\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Address</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"address\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Gender</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"gender\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Phone Number</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"phoneNumber\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Email</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"email\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Join Date</label>\n                                                <Field className=\"form-control\" type=\"date\" name=\"joinDate\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Resignation Date</label>\n                                                <Field className=\"form-control\" type=\"date\" name=\"resignationDate\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Employee Status</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"employeeStatus\"/>\n                                            </fieldset>\n                                            <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                        </Form>\n                                    )                        \n                                }\n                            </Formik>\n                        </div>\n                        <div className=\"col-md-1\">\n                        </div>\n                    </div>                    \n                </div>\n                <FooterComponent/>\n            </div>            \n        )\n    }\n}\n\nexport default EmployeeComponent","import axios from 'axios';\n\nconst HOST_API = 'https://workforce-app.herokuapp.com/';\nconst SERVICE_API = `${HOST_API}/jobs`;\n\nclass JobDataService {\n    retrieveAllJobs(name) {\n        return axios.get(`${SERVICE_API}/list`);\n    }\n    deleteJob(id) {\n        return axios.delete(`${SERVICE_API}/${id}`);\n    }\n    retrieveJob(id) {\n        return axios.get(`${SERVICE_API}/${id}`);\n    }\n    updateJob(id, todo) {\n        return axios.put(`${SERVICE_API}/${id}`, todo);\n    }\n    createJob(todo) {\n        return axios.post(`${SERVICE_API}`, todo);\n    }\n}\n\nexport default new JobDataService();","import React, {Component} from 'react';\nimport Table from 'react-bootstrap/Table';\nimport JobDataService from '../services/JobDataService.js';\nimport FooterComponentList from './FooterComponentList.jsx';\n\nclass ListJobComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            jobs: [],\n            message:\"\"\n        }\n        this.refreshJobs = this.refreshJobs.bind(this);\n        this.deleteJobClicked = this.deleteJobClicked.bind(this);\n        this.updateJobClicked = this.updateJobClicked.bind(this);\n        this.addJobClicked = this.addJobClicked.bind(this);\n    }\n\n    componentDidMount() {\n        this.refreshJobs();\n    }\n\n    refreshJobs() {\n        JobDataService.retrieveAllJobs(\"name\")\n            .then(\n                response => {\n                    this.setState({jobs: response.data})\n                }\n            )\n    }\n\n    deleteJobClicked(id, name) {\n        JobDataService.deleteJob(id)\n            .then(\n                response => {\n                    this.setState({message: `Delete of job ${name} Successful`})\n                    this.refreshJobs()\n                }\n            )\n    }\n\n    updateJobClicked(id) {\n        console.log(\"Update: \" + id)\n        this.props.history.push(`/job/${id}`)\n    }\n\n    addJobClicked() {\n        this.props.history.push('/job/-1')\n    }\n\n    render() {\n        return(\n            <div>\n                <h3>List Job</h3>\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <Table bordered striped hover size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>Job Code</th>\n                                <th>Job Name</th>\n                                <th>Shift</th>\n                                <th>Activity Date</th>\n                                <th>Activity Name</th>\n                                <th>Start</th>\n                                <th>End</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.jobs.map (\n                                    job => \n                                    <tr key={job.jobCode}>\n                                        <td>{job.jobCode}</td>\n                                        <td>{job.jobName}</td>\n                                        <td>{job.shiftCode}</td>\n                                        <td>{job.activityDate}</td>\n                                        <td>{job.activityName}</td>\n                                        <td>{job.startTime}</td>\n                                        <td>{job.endTime}</td>\n                                        <td><button className=\"btn btn-sm btn-info\" onClick={() => this.updateJobClicked(job.jobCode)}>Update</button></td>\n                                        <td><button className=\"btn btn-sm btn-danger\" onClick={() => this.deleteJobClicked(job.jobCode, job.jobName)}>Delete</button></td>\n                                    </tr>\n                                )\n                            }                        \n                        </tbody>\n                    </Table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-info\" onClick={() => this.addJobClicked()}>Add</button>\n                    </div>\n                </div>\n                <FooterComponentList/>\n            </div>\n        )\n    }\n}\n\nexport default ListJobComponent","import React, {Component} from 'react';\nimport moment from 'moment';\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\nimport JobDataService from '../services/JobDataService.js';\nimport FooterComponent from './FooterComponent.jsx';\n\nclass JobComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.match.params.id,\n            jobCode: '',\n            jobName: '',\n            shiftCode: '',\n            activityDate: '',\n            activityName: '',\n            instance: '',\n            classCount: '',\n            startTime: '',\n            endTime: '',\n            employeeId: ''\n        }\n        this.onSubmit = this.onSubmit.bind(this);\n        this.validate = this.validate.bind(this);\n    }\n\n    componentDidMount() {\n\n        if(this.state.id === -1) {\n            return\n        }\n\n        JobDataService.retrieveJob(this.state.id)\n        .then(response => this.setState({\n            jobCode:response.data.jobCode,\n            jobName:response.data.jobName,\n            shiftCode:response.data.shiftCode,\n            activityDate:moment(response.data.activityDate).format('YYYY-MM-DD'),\n            activityName:response.data.activityName,\n            instance:response.data.instance,\n            classCount:response.data.classCount,\n            startTime:response.data.startTime,\n            endTime:response.data.endTime,\n            employeeId:response.data.employeeId\n        }))\n    }\n\n    validate(values) {\n        let errors = {}\n        \n        if(!values.jobName) {\n            errors.jobName = 'Enter a job name'           \n        } else if(values.jobName.length < 4) {\n            errors.jobName = 'Enter at least 4 characters for job name'\n        }\n\n        if(!values.jobCode) {\n            errors.jobCode = 'Enter a job code'           \n        } else if(values.jobCode.length < 1) {\n            errors.jobCode = 'Enter at least 1 characters for job code'\n        }\n\n        return errors;\n    }\n\n    onSubmit(values) {\n        console.log(\"Here\")\n        if(this.state.id === '-1') {\n            console.log(\"Create\")\n            JobDataService.createJob({\n                jobCode:values.jobCode,\n                jobName:values.jobName,\n                shiftCode:values.shiftCode,\n                activityDate:values.activityDate,\n                activityName:values.activityName,\n                instance:values.instance,\n                classCount:values.classCount,\n                startTime:values.startTime,\n                endTime:values.endTime,\n                employeeId:\"0\"\n            }).then(() => this.props.history.push('/jobs'))\n        } else {\n            console.log(\"Update\")\n            JobDataService.updateJob(this.state.id, {\n                jobCode:values.jobCode,\n                jobName:values.jobName,\n                shiftCode:values.shiftCode,\n                activityDate:values.activityDate,\n                activityName:values.activityName,\n                instance:values.instance,\n                classCount:values.classCount,\n                startTime:values.startTime,\n                endTime:values.endTime,\n                employeeId:\"0\"\n            }).then(() => this.props.history.push('/jobs'))\n        }\n    }\n\n    render() {\n        let {jobCode, jobName, shiftCode, activityDate, activityName, instance, classCount, startTime, endTime, employeeId} = this.state\n\n        return (\n            <div>\n                <h1>Job</h1>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-1\">\n                        </div>\n                        <div className=\"col-md-10\">\n                            <Formik \n                                initialValues={{jobCode, jobName, shiftCode, activityDate, activityName, instance, classCount, startTime, endTime, employeeId}}\n                                onSubmit={this.onSubmit}\n                                validateOnChange={false}\n                                validateOnBlur={false}\n                                validate={this.validate}\n                                enableReinitialize={true}\n                            >\n                                {\n                                    (props) => (\n                                        <Form>\n                                            <ErrorMessage name=\"jobName\" component=\"div\" className=\"alert alert-warning\"/>                                            \n                                            <ErrorMessage name=\"jobCode\" component=\"div\" className=\"alert alert-warning\"/>\n                                            <fieldset className=\"form-group\">\n                                                <label>Job Code</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"jobCode\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Job Name</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"jobName\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Shift Code</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"shiftCode\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Activity Date</label>\n                                                <Field className=\"form-control\" type=\"date\" name=\"activityDate\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Activity Name</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"activityName\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Instance</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"instance\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Class Count</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"classCount\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Start Time</label>\n                                                <Field className=\"form-control\" type=\"time\" name=\"startTime\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>End Time</label>\n                                                <Field className=\"form-control\" type=\"time\" name=\"endTime\"/>\n                                            </fieldset>\n                                            <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                        </Form>\n                                    )                        \n                                }\n                            </Formik>\n                        </div>\n                        <div className=\"col-md-1\">\n                        </div>\n                    </div>                    \n                </div>\n                <FooterComponent/>\n            </div>\n        )\n    }\n}\n\nexport default JobComponent","import axios from 'axios';\n\nconst HOST_API = 'https://workforce-app.herokuapp.com/';\nconst SERVICE_API = `${HOST_API}/shifts`;\n\nclass ShiftDataService {\n    retrieveAllShifts(name) {\n        return axios.get(`${SERVICE_API}/list`);\n    }\n    deleteShift(id) {\n        return axios.delete(`${SERVICE_API}/${id}`);\n    }\n    retrieveShift(id) {\n        return axios.get(`${SERVICE_API}/${id}`);\n    }\n    updateShift(id, todo) {\n        return axios.put(`${SERVICE_API}/${id}`, todo);\n    }\n    createShift(todo) {\n        return axios.post(`${SERVICE_API}`, todo);\n    }\n}\n\nexport default new ShiftDataService();","import React, {Component} from 'react';\nimport Table from 'react-bootstrap/Table';\nimport ShiftDataService from '../services/ShiftDataService.js';\nimport FooterComponentList from './FooterComponentList.jsx';\n\nclass ListShiftComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            shifts: [],\n            message:\"\"\n        }\n        this.refreshShifts = this.refreshShifts.bind(this);\n        this.deleteShiftClicked = this.deleteShiftClicked.bind(this);\n        this.updateShiftClicked = this.updateShiftClicked.bind(this);\n        this.addShiftClicked = this.addShiftClicked.bind(this);\n    }\n\n    componentDidMount() {\n        this.refreshShifts();\n    }\n\n    refreshShifts() {\n        ShiftDataService.retrieveAllShifts(\"name\")\n            .then(\n                response => {\n                    this.setState({shifts: response.data})\n                }\n            )\n    }\n\n    deleteShiftClicked(id, name) {\n        ShiftDataService.deleteShift(id)\n            .then(\n                response => {\n                    this.setState({message: `Delete of shift ${name} Successful`})\n                    this.refreshShifts()\n                }\n            )\n    }\n\n    updateShiftClicked(id) {\n        console.log(\"Update: \" + id)\n        this.props.history.push(`/shift/${id}`)\n    }\n\n    addShiftClicked() {\n        this.props.history.push('/shift/-1')\n    }\n\n    render() {\n        return(\n            <div>\n                <h3>List Shift</h3>\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <Table bordered striped hover size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>Shift Code</th>\n                                <th>Shift Name</th>\n                                <th>Start Time</th>\n                                <th>End Time</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.shifts.map (\n                                    shift => \n                                    <tr key={shift.shiftCode}>\n                                        <td>{shift.shiftCode}</td>\n                                        <td>{shift.shiftName}</td>\n                                        <td>{shift.startTime}</td>\n                                        <td>{shift.endTime}</td>\n                                        <td><button className=\"btn btn-sm btn-info\" onClick={() => this.updateShiftClicked(shift.shiftCode)}>Update</button></td>\n                                        <td><button className=\"btn btn-sm btn-danger\" onClick={() => this.deleteShiftClicked(shift.shiftCode, shift.shiftName)}>Delete</button></td>\n                                    </tr>\n                                )\n                            }                        \n                        </tbody>\n                    </Table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-info\" onClick={() => this.addShiftClicked()}>Add</button>\n                    </div>\n                </div>\n                <FooterComponentList/>\n            </div>\n        )\n    }\n}\n\nexport default ListShiftComponent","import React, {Component} from 'react';\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\nimport ShiftDataService from '../services/ShiftDataService.js';\nimport FooterComponentList from './FooterComponentList.jsx';\n\nclass ShiftComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.match.params.id,\n            shiftCode: '',\n            shiftName: '',\n            startTime: '',\n            endTime: ''\n        }\n        this.onSubmit = this.onSubmit.bind(this);\n        this.validate = this.validate.bind(this);\n    }\n\n    componentDidMount() {\n\n        if(this.state.id === -1) {\n            return\n        }\n\n        ShiftDataService.retrieveShift(this.state.id)\n        .then(response => this.setState({\n            shiftCode:response.data.shiftCode,\n            shiftName:response.data.shiftName,\n            startTime:response.data.startTime,\n            endTime:response.data.endTime\n        }))\n    }\n\n    validate(values) {\n        let errors = {}\n        \n        if(!values.shiftCode) {\n            errors.shiftCode = 'Enter a shift code'           \n        } else if(values.shiftCode.length < 1) {\n            errors.shiftCode = 'Enter at least 1 characters for shift code'\n        }\n\n        if(!values.shiftName) {\n            errors.shiftName = 'Enter a shift name'           \n        } else if(values.shiftName.length < 4) {\n            errors.shiftName = 'Enter at least 4 characters for shift name'\n        }\n\n        return errors;\n    }\n\n    onSubmit(values) {\n        console.log(\"Here\")\n        if(this.state.id === '-1') {\n            console.log(\"Create\")\n            ShiftDataService.createShift({\n                shiftCode:values.shiftCode,\n                shiftName:values.shiftName,\n                startTime:values.startTime,\n                endTime:values.endTime\n            }).then(() => this.props.history.push('/shifts'))\n        } else {\n            console.log(\"Update\")\n            ShiftDataService.updateShift(this.state.id, {\n                shiftCode:values.shiftCode,\n                shiftName:values.shiftName,\n                startTime:values.startTime,\n                endTime:values.endTime\n            }).then(() => this.props.history.push('/shifts'))\n        }\n    }\n\n    render() {\n        let {shiftCode, shiftName, startTime, endTime} = this.state\n\n        return (\n            <div>\n                <h1>Shift</h1>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-1\">\n                        </div>\n                        <div className=\"col-md-10\">\n                            <Formik \n                                initialValues={{shiftCode, shiftName, startTime, endTime}}\n                                onSubmit={this.onSubmit}\n                                validateOnChange={false}\n                                validateOnBlur={false}\n                                validate={this.validate}\n                                enableReinitialize={true}\n                            >\n                                {\n                                    (props) => (\n                                        <Form>\n                                            <ErrorMessage name=\"shiftCode\" component=\"div\" className=\"alert alert-warning\"/>                                            \n                                            <ErrorMessage name=\"shiftName\" component=\"div\" className=\"alert alert-warning\"/>\n                                            <fieldset className=\"form-group\">\n                                                <label>Shift Code</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"shiftCode\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Shift Name</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"shiftName\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Start Time</label>\n                                                <Field className=\"form-control\" type=\"time\" name=\"startTime\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>End Time</label>\n                                                <Field className=\"form-control\" type=\"time\" name=\"endTime\"/>\n                                            </fieldset>\n                                            <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                        </Form>\n                                    )                        \n                                }\n                            </Formik>\n                        </div>\n                        <div className=\"col-md-1\">\n                        </div>\n                    </div>                    \n                </div>\n                <FooterComponentList/>\n            </div>\n        )\n    }\n}\n\nexport default ShiftComponent","import axios from 'axios';\n\nconst HOST_API = 'https://workforce-app.herokuapp.com/';\nconst SERVICE_API = `${HOST_API}/skills`;\n\nclass SkillDataService {\n    retrieveAllSkills(name) {\n        return axios.get(`${SERVICE_API}/list`);\n    }\n    deleteSkill(id) {\n        return axios.delete(`${SERVICE_API}/${id}`);\n    }\n    retrieveSkill(id) {\n        return axios.get(`${SERVICE_API}/${id}`);\n    }\n    updateSkill(id, todo) {\n        return axios.put(`${SERVICE_API}/${id}`, todo);\n    }\n    createSkill(todo) {\n        return axios.post(`${SERVICE_API}`, todo);\n    }\n}\n\nexport default new SkillDataService();","import React, {Component} from 'react';\nimport Table from 'react-bootstrap/Table';\nimport SkillDataService from '../services/SkillDataService.js';\nimport FooterComponentList from './FooterComponentList.jsx';\n\nclass ListSkillComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            skills: [],\n            message:\"\"\n        }\n        this.refreshSkills = this.refreshSkills.bind(this);\n        this.deleteSkillClicked = this.deleteSkillClicked.bind(this);\n        this.updateSkillClicked = this.updateSkillClicked.bind(this);\n        this.addSkillClicked = this.addSkillClicked.bind(this);\n    }\n\n    componentDidMount() {\n        this.refreshSkills();\n    }\n\n    refreshSkills() {\n        SkillDataService.retrieveAllSkills(\"name\")\n            .then(\n                response => {\n                    this.setState({skills: response.data})\n                }\n            )\n    }\n\n    deleteSkillClicked(id, name) {\n        SkillDataService.deleteSkill(id)\n            .then(\n                response => {\n                    this.setState({message: `Delete of skill ${name} Successful`})\n                    this.refreshSkills()\n                }\n            )\n    }\n\n    updateSkillClicked(id) {\n        console.log(\"Update: \" + id)\n        this.props.history.push(`/skill/${id}`)\n    }\n\n    addSkillClicked() {\n        this.props.history.push('/skill/-1')\n    }\n\n    render() {\n        return(\n            <div>\n                <h3>List Skill</h3>\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <Table bordered striped hover size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>Skill Code</th>\n                                <th>Skill Name</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.skills.map (\n                                    skill => \n                                    <tr key={skill.skillCode}>\n                                        <td>{skill.skillCode}</td>\n                                        <td>{skill.skillName}</td>\n                                        <td><button className=\"btn btn-sm btn-info\" onClick={() => this.updateSkillClicked(skill.skillCode)}>Update</button></td>\n                                        <td><button className=\"btn btn-sm btn-danger\" onClick={() => this.deleteSkillClicked(skill.skillCode, skill.skillName)}>Delete</button></td>\n                                    </tr>\n                                )\n                            }                        \n                        </tbody>\n                    </Table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-info\" onClick={() => this.addSkillClicked()}>Add</button>\n                    </div>\n                </div>\n                <FooterComponentList/>\n            </div>\n        )\n    }\n}\n\nexport default ListSkillComponent","import React, {Component} from 'react';\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\nimport SkillDataService from '../services/SkillDataService.js';\nimport FooterComponentList from './FooterComponentList.jsx';\n\nclass SkillComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.match.params.id,\n            skillCode: '',\n            skillName: ''        }\n        this.onSubmit = this.onSubmit.bind(this);\n        this.validate = this.validate.bind(this);\n    }\n\n    componentDidMount() {\n\n        if(this.state.id === -1) {\n            return\n        }\n\n        SkillDataService.retrieveSkill(this.state.id)\n        .then(response => this.setState({\n            skillCode:response.data.skillCode,\n            skillName:response.data.skillName\n        }))\n    }\n\n    validate(values) {\n        let errors = {}\n        \n        if(!values.skillCode) {\n            errors.skillCode = 'Enter a skill code'           \n        } else if(values.skillCode.length < 1) {\n            errors.skillCode = 'Enter at least 1 characters for skill code'\n        }\n\n        if(!values.skillName) {\n            errors.skillName = 'Enter a skill name'           \n        } else if(values.skillName.length < 4) {\n            errors.skillName = 'Enter at least 4 characters for skill name'\n        }\n\n        return errors;\n    }\n\n    onSubmit(values) {\n        console.log(\"Here\")\n        if(this.state.id === '-1') {\n            console.log(\"Create\")\n            SkillDataService.createSkill({\n                skillCode:values.skillCode,\n                skillName:values.skillName\n            }).then(() => this.props.history.push('/skills'))\n        } else {\n            console.log(\"Update\")\n            SkillDataService.updateSkill(this.state.id, {\n                skillCode:values.skillCode,\n                skillName:values.skillName\n            }).then(() => this.props.history.push('/skills'))\n        }\n    }\n\n    render() {\n        let {skillCode, skillName} = this.state\n\n        return (\n            <div>\n                <h1>Skill</h1>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-1\">\n                        </div>\n                        <div className=\"col-md-10\">\n                            <Formik \n                                initialValues={{skillCode, skillName}}\n                                onSubmit={this.onSubmit}\n                                validateOnChange={false}\n                                validateOnBlur={false}\n                                validate={this.validate}\n                                enableReinitialize={true}\n                            >\n                                {\n                                    (props) => (\n                                        <Form>\n                                            <ErrorMessage name=\"skillCode\" component=\"div\" className=\"alert alert-warning\"/>                                            \n                                            <ErrorMessage name=\"skillName\" component=\"div\" className=\"alert alert-warning\"/>\n                                            <fieldset className=\"form-group\">\n                                                <label>Skill Code</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"skillCode\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Skill Name</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"skillName\"/>\n                                            </fieldset>\n                                            <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                        </Form>\n                                    )                        \n                                }\n                            </Formik>\n                        </div>\n                        <div className=\"col-md-1\">\n                        </div>\n                    </div>                    \n                </div>\n                <FooterComponentList/>\n            </div>\n        )\n    }\n}\n\nexport default SkillComponent","import axios from 'axios';\n\nconst HOST_API = 'https://workforce-app.herokuapp.com/';\nconst SERVICE_API = `${HOST_API}/roles`;\n\nclass RoleDataService {\n    retrieveAllRoles(name) {\n        return axios.get(`${SERVICE_API}/list`);\n    }\n    deleteRole(id) {\n        return axios.delete(`${SERVICE_API}/${id}`);\n    }\n    retrieveRole(id) {\n        return axios.get(`${SERVICE_API}/${id}`);\n    }\n    updateRole(id, todo) {\n        return axios.put(`${SERVICE_API}/${id}`, todo);\n    }\n    createRole(todo) {\n        return axios.post(`${SERVICE_API}`, todo);\n    }\n}\n\nexport default new RoleDataService();","import React, {Component} from 'react';\nimport Table from 'react-bootstrap/Table';\nimport RoleDataService from '../services/RoleDataService.js';\nimport FooterComponentList from './FooterComponentList.jsx';\n\nclass ListRoleComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            roles: [],\n            message:\"\"\n        }\n        this.refreshRoles = this.refreshRoles.bind(this);\n        this.deleteRoleClicked = this.deleteRoleClicked.bind(this);\n        this.updateRoleClicked = this.updateRoleClicked.bind(this);\n        this.addRoleClicked = this.addRoleClicked.bind(this);\n    }\n\n    componentDidMount() {\n        this.refreshRoles();\n    }\n\n    refreshRoles() {\n        RoleDataService.retrieveAllRoles(\"name\")\n            .then(\n                response => {\n                    this.setState({roles: response.data})\n                }\n            )\n    }\n\n    deleteRoleClicked(id, name) {\n        RoleDataService.deleteRole(id)\n            .then(\n                response => {\n                    this.setState({message: `Delete of role ${name} Successful`})\n                    this.refreshRoles()\n                }\n            )\n    }\n\n    updateRoleClicked(id) {\n        console.log(\"Update: \" + id)\n        this.props.history.push(`/role/${id}`)\n    }\n\n    addRoleClicked() {\n        this.props.history.push('/role/-1')\n    }\n\n    render() {\n        return(\n            <div>\n                <h3>List Role</h3>\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <Table bordered striped hover size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>Role Code</th>\n                                <th>Role Name</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.roles.map (\n                                    role => \n                                    <tr key={role.roleCode}>\n                                        <td>{role.roleCode}</td>\n                                        <td>{role.roleName}</td>\n                                        <td><button className=\"btn btn-sm btn-info\" onClick={() => this.updateRoleClicked(role.roleCode)}>Update</button></td>\n                                        <td><button className=\"btn btn-sm btn-danger\" onClick={() => this.deleteRoleClicked(role.roleCode, role.roleName)}>Delete</button></td>\n                                    </tr>\n                                )\n                            }                        \n                        </tbody>\n                    </Table>\n                    <div className=\"row\">\n                        <button className=\"btn btn-info\" onClick={() => this.addRoleClicked()}>Add</button>\n                    </div>\n                </div>\n                <FooterComponentList/>\n            </div>\n        )\n    }\n}\n\nexport default ListRoleComponent","import React, {Component} from 'react';\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\nimport RoleDataService from '../services/RoleDataService.js';\nimport FooterComponentList from './FooterComponentList.jsx';\n\nclass RoleComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.match.params.id,\n            roleCode: '',\n            roleName: ''        }\n        this.onSubmit = this.onSubmit.bind(this);\n        this.validate = this.validate.bind(this);\n    }\n\n    componentDidMount() {\n\n        if(this.state.id === -1) {\n            return\n        }\n\n        RoleDataService.retrieveRole(this.state.id)\n        .then(response => this.setState({\n            roleCode:response.data.roleCode,\n            roleName:response.data.roleName\n        }))\n    }\n\n    validate(values) {\n        let errors = {}\n        \n        if(!values.roleCode) {\n            errors.roleCode = 'Enter a role code'           \n        } else if(values.roleCode.length < 1) {\n            errors.roleCode = 'Enter at least 1 characters for role code'\n        }\n\n        if(!values.roleName) {\n            errors.roleName = 'Enter a role name'           \n        } else if(values.roleName.length < 4) {\n            errors.roleName = 'Enter at least 4 characters for role name'\n        }\n\n        return errors;\n    }\n\n    onSubmit(values) {\n        console.log(\"Here\")\n        if(this.state.id === '-1') {\n            console.log(\"Create\")\n            RoleDataService.createRole({\n                roleCode:values.roleCode,\n                roleName:values.roleName\n            }).then(() => this.props.history.push('/roles'))\n        } else {\n            console.log(\"Update\")\n            RoleDataService.updateRole(this.state.id, {\n                roleCode:values.roleCode,\n                roleName:values.roleName\n            }).then(() => this.props.history.push('/roles'))\n        }\n    }\n\n    render() {\n        let {roleCode, roleName} = this.state\n\n        return (\n            <div>\n                <h1>Role</h1>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-1\">\n                        </div>\n                        <div className=\"col-md-10\">\n                            <Formik \n                                initialValues={{roleCode, roleName}}\n                                onSubmit={this.onSubmit}\n                                validateOnChange={false}\n                                validateOnBlur={false}\n                                validate={this.validate}\n                                enableReinitialize={true}\n                            >\n                                {\n                                    (props) => (\n                                        <Form>\n                                            <ErrorMessage name=\"roleCode\" component=\"div\" className=\"alert alert-warning\"/>                                            \n                                            <ErrorMessage name=\"roleName\" component=\"div\" className=\"alert alert-warning\"/>\n                                            <fieldset className=\"form-group\">\n                                                <label>Role Code</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"roleCode\"/>\n                                            </fieldset>\n                                            <fieldset className=\"form-group\">\n                                                <label>Role Name</label>\n                                                <Field className=\"form-control\" type=\"text\" name=\"roleName\"/>\n                                            </fieldset>\n                                            <button className=\"btn btn-success\" type=\"submit\">Save</button>\n                                        </Form>\n                                    )                        \n                                }\n                            </Formik>\n                        </div>\n                        <div className=\"col-md-1\">\n                        </div>\n                    </div>                    \n                </div>\n                <FooterComponentList/>\n            </div>\n        )\n    }\n}\n\nexport default RoleComponent","import React, { Component } from \"react\";\nimport Timeline from 'react-calendar-timeline';\nimport 'react-calendar-timeline/lib/Timeline.css';\nimport moment from 'moment'\nimport FooterComponentList from './FooterComponentList.jsx';\n\nclass OptimizerComponent extends Component {\n    render() {\n        const groups = [\n            {id: 1, title: 'Dedi Cahyadi'}, \n            {id: 2, title: 'Nurrahma Oktaviani'},\n            {id: 3, title: 'Yang Mi Ovelien'},\n            {id: 4, title: 'Yunita Wulansari'}\n        ]\n\n        const items = [\n            {\n              id: 1,\n              group: 1,\n              title: 'Stand By',\n              start_time: moment(),\n              end_time: moment().add(1, 'hour')\n            },\n            {\n              id: 2,\n              group: 2,\n              title: 'Stand By',\n              start_time: moment().add(-0.5, 'hour'),\n              end_time: moment().add(0.5, 'hour')\n            },\n            {\n              id: 3,\n              group: 1,\n              title: 'Promosi',\n              start_time: moment().add(2, 'hour'),\n              end_time: moment().add(3, 'hour')\n            },\n            {\n                id: 4,\n                group: 3,\n                title: 'Follow Up',\n                start_time: moment().add(2, 'hour'),\n                end_time: moment().add(3, 'hour')\n            },\n            {\n                id: 5,\n                group: 4,\n                title: 'Follow Up',\n                start_time: moment().add(2, 'hour'),\n                end_time: moment().add(3, 'hour')\n            }\n          ]\n\n        return (\n            <div>\n                <div className=\"container\">\n                    <h3>Employee Scheduling</h3>\n                    <Timeline\n                        groups={groups}\n                        items={items}\n                        defaultTimeStart={moment().add(-12, 'hour')}\n                        defaultTimeEnd={moment().add(12, 'hour')}\n                    />        \n                </div>\n                <FooterComponentList/>\n            </div>\n        )\n    }\n}\n\nexport default OptimizerComponent","import React, {Component} from 'react';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\nimport AuthenticatedRoute from '../services/AuthenticatedRoute.jsx';\nimport LoginComponent from '../views/LoginComponent.jsx';\nimport HeaderComponent from '../views/HeaderComponent.jsx';\nimport WelcomeComponent from '../views/WelcomeComponent.jsx';\nimport ErrorComponent from '../views/ErrorComponent.jsx';\nimport LogoutComponent from '../views/LogoutComponent.jsx';\nimport ListEmployeeComponent from '../views/ListEmployeeComponent.jsx';\nimport EmployeeComponent from '../views/EmployeeComponent.jsx';\nimport ListJobComponent from '../views/ListJobComponent.jsx';\nimport JobComponent from '../views/JobComponent.jsx';\nimport ListShiftComponent from '../views/ListShiftComponent.jsx';\nimport ShiftComponent from '../views/ShiftComponent.jsx';\nimport ListSkillComponent from '../views/ListSkillComponent.jsx';\nimport SkillComponent from '../views/SkillComponent.jsx';\nimport ListRoleComponent from '../views/ListRoleComponent.jsx';\nimport RoleComponent from '../views/RoleComponent.jsx';\nimport OptimizerComponent from '../views/OptimizerComponent.jsx';\n\nclass WorkforceApp extends Component {\n    render() {\n        return(\n            <div className=\"TodoApp\">\n                <HashRouter basename=\"/\">\n                    <>\n                        <HeaderComponent/>\n                        <Switch>\n                            <Route path=\"/\" exact component={LoginComponent}/>\n                            <Route path=\"/login\" component={LoginComponent}/>\n                            <AuthenticatedRoute path=\"/welcome/:name\" component={WelcomeComponent}/>\n                            <AuthenticatedRoute path=\"/employees\" component={ListEmployeeComponent}/>\n                            <AuthenticatedRoute path=\"/employee/:id\" component={EmployeeComponent}/>\n                            <AuthenticatedRoute path=\"/jobs\" component={ListJobComponent}/>\n                            <AuthenticatedRoute path=\"/job/:id\" component={JobComponent}/>\n                            <AuthenticatedRoute path=\"/roles\" component={ListRoleComponent}/>\n                            <AuthenticatedRoute path=\"/role/:id\" component={RoleComponent}/>\n                            <AuthenticatedRoute path=\"/shifts\" component={ListShiftComponent}/>\n                            <AuthenticatedRoute path=\"/shift/:id\" component={ShiftComponent}/>\n                            <AuthenticatedRoute path=\"/skills\" component={ListSkillComponent}/>\n                            <AuthenticatedRoute path=\"/skill/:id\" component={SkillComponent}/>\n                            <AuthenticatedRoute path=\"/optimizer\" component={OptimizerComponent}/>\n                            <AuthenticatedRoute path=\"/logout\" component={LogoutComponent}/>\n                            <Route path=\"\" component={ErrorComponent}/>\n                        </Switch>                        \n                    </>\n                </HashRouter>\n            </div>\n        );\n    }\n}\n\nexport default WorkforceApp;","import React from 'react';\nimport WorkforceApp from '../src/components/views/WorkforceApp.jsx';\nimport './App.css';\nimport './bootstrap.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WorkforceApp/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}